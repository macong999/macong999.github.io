<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Hive的网站用户行为分析项目</title>
      <link href="/2020/06/06/ji-yu-hive-de-wang-zhan-yong-hu-xing-wei-fen-xi-xiang-mu/"/>
      <url>/2020/06/06/ji-yu-hive-de-wang-zhan-yong-hu-xing-wei-fen-xi-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、项目需求"><a href="#一、项目需求" class="headerlink" title="一、项目需求"></a>一、项目需求</h2><p>根据给出数据样例统计以下指标<br>1.统计各商品的浏览数量（<code>PV</code>）<br>2.统计各商品的访客数（<code>UV</code>）<br>3.统计商品分类的浏览数（<code>PV</code>）<br>4.统计商品分类的访客数（<code>UV</code>）<br>5.统计商品、分类页面的会话数<br>6.统计各个外部来源渠道的访客数（<code>UV</code>）</p><h2 id="二、数据介绍（access-log文件）"><a href="#二、数据介绍（access-log文件）" class="headerlink" title="二、数据介绍（access.log文件）"></a>二、数据介绍（access.log文件）</h2><p><code>access.log</code>为某东网站一天的访问数据，通过制表符<code>“\t”</code>分隔每个字段的数据<br>其中数据的含义如下：<br>第1列 时间：用户访问网站的时间，即当前日志的时间<br>第2列 <code>IP</code>地址：<code>IP</code>地址，即用户端的<code>IP</code>地址<br>第3列 访问方法：只有<code>GET/POST</code><br>第4列 <code>URL</code>：用户当前访问网站的<code>URL</code><br>第5列 <code>HTTP</code>协议<br>第6列 用户<code>ID</code>：唯一的标示了一个用户的身份<br>第7列 <code>Referer URL</code>：用户上一个访问的URL地址<br>第8列 状态码：即访问状态，如<code>200</code>表示访问成功</p><h2 id="三、确定数据结构"><a href="#三、确定数据结构" class="headerlink" title="三、确定数据结构"></a>三、确定数据结构</h2><p>启动<code>hadoop</code>集群，分别执行 <code>start-hdfs.sh</code> 和 <code>start-yarn.sh</code> 命令<br>等待<code>hadoop</code>集群启动后进入<code>hive</code>，执行导入如下命令</p><h3 id="1、根据已知日志数据建立日志表"><a href="#1、根据已知日志数据建立日志表" class="headerlink" title="1、根据已知日志数据建立日志表"></a>1、根据已知日志数据建立日志表</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> log_data<span class="token punctuation">(</span>localtime string<span class="token punctuation">,</span>ip string<span class="token punctuation">,</span>method string<span class="token punctuation">,</span>uuid string<span class="token punctuation">,</span>url string<span class="token punctuation">,</span>http_protorol string<span class="token punctuation">,</span>referer_url string<span class="token punctuation">,</span>status_code string<span class="token punctuation">)</span>PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>dt <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span></code></pre><h3 id="2、根据项目需求建立结果表"><a href="#2、根据项目需求建立结果表" class="headerlink" title="2、根据项目需求建立结果表"></a>2、根据项目需求建立结果表</h3><h4 id="建立fact-goods表"><a href="#建立fact-goods表" class="headerlink" title="建立fact_goods表"></a>建立fact_goods表</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> fact_goods<span class="token punctuation">(</span>goods_id string<span class="token punctuation">,</span>pv <span class="token keyword">int</span><span class="token punctuation">,</span>uv <span class="token keyword">int</span><span class="token punctuation">,</span>session_num <span class="token keyword">int</span><span class="token punctuation">)</span>PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>dt <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="建立fact-category表"><a href="#建立fact-category表" class="headerlink" title="建立fact_category表"></a>建立fact_category表</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> fact_category<span class="token punctuation">(</span>category_id string<span class="token punctuation">,</span>pv <span class="token keyword">int</span><span class="token punctuation">,</span>uv <span class="token keyword">int</span><span class="token punctuation">,</span>session_num <span class="token keyword">int</span><span class="token punctuation">)</span>PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>dt <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="建立fact-source表"><a href="#建立fact-source表" class="headerlink" title="建立fact_source表"></a>建立fact_source表</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> fact_source<span class="token punctuation">(</span>source_name string<span class="token punctuation">,</span>UV <span class="token keyword">int</span><span class="token punctuation">)</span>PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>dt <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3、将用户行为日志数据导入日志表"><a href="#3、将用户行为日志数据导入日志表" class="headerlink" title="3、将用户行为日志数据导入日志表"></a>3、将用户行为日志数据导入日志表</h3><p>1）将access.log日志上传到虚拟机的<code>/usr/local/qst/logs</code><br>2）执行如下代码将日志导入日志表</p><pre><code>load data local inpath '/usr/local/qst/logs/access.log' overwrite into table log_data partition(dt=20200604); </code></pre><h2 id="四、业务实现"><a href="#四、业务实现" class="headerlink" title="四、业务实现"></a>四、业务实现</h2><h3 id="1、数据分析"><a href="#1、数据分析" class="headerlink" title="1、数据分析"></a>1、数据分析</h3><p>通过需求的1-4项我们可以知道主要统计商品和分类的指标，通过日志我们能看出来只有两种类型的<code>URL</code>如下：</p><pre class=" language-html"><code class="language-html">https://item.jd.com/数字.htmlhttps://list.jd.com/list.html?cat=数字,数字,数字</code></pre><p>通过在浏览其中打开URL，我们可以发现如下规律<br><code>https://item.jd.com/数字.html</code>  类型的URL打开的都是商品页面<br><code>https://list.jd.com/list.html?cat=数字,数字,数字</code>   类型的<code>URL</code>打开的都是商品的分类页面<br>由此推断第一种类型中的数字为“商品<code>ID</code>”，第二种类型的URL中的数字组合为“分类<code>ID</code>”</p><h3 id="2、商品的统计指标实现"><a href="#2、商品的统计指标实现" class="headerlink" title="2、商品的统计指标实现"></a>2、商品的统计指标实现</h3><h4 id="1）计算商品指标"><a href="#1）计算商品指标" class="headerlink" title="1）计算商品指标"></a>1）计算商品指标</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> fact_goods <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token number">20200603</span><span class="token punctuation">)</span> <span class="token keyword">select</span> regexp_replace<span class="token punctuation">(</span>regexp_replace<span class="token punctuation">(</span>parse_url<span class="token punctuation">(</span>url <span class="token punctuation">,</span> <span class="token string">'PATH'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.html'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> goods_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> uuid<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token punctuation">,</span><span class="token number">0</span> <span class="token keyword">as</span> session_num<span class="token keyword">from</span> log_data <span class="token keyword">where</span> dt <span class="token operator">=</span> <span class="token number">20200603</span><span class="token operator">and</span> status_code <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">and</span> length<span class="token punctuation">(</span>uuid<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">and</span> url  <span class="token operator">like</span> 'https:<span class="token comment" spellcheck="true">//item.jd.com/%' </span><span class="token keyword">group</span> <span class="token keyword">by</span> regexp_replace<span class="token punctuation">(</span>regexp_replace<span class="token punctuation">(</span>parse_url<span class="token punctuation">(</span>url <span class="token punctuation">,</span> <span class="token string">'PATH'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.html'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2）计算分类指标"><a href="#2）计算分类指标" class="headerlink" title="2）计算分类指标"></a>2）计算分类指标</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> fact_category <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token number">20200603</span><span class="token punctuation">)</span> <span class="token keyword">select</span> parse_url<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">'QUERY'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> category_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> uuid<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token punctuation">,</span><span class="token number">0</span> <span class="token keyword">as</span> session_num<span class="token keyword">from</span> log_data <span class="token keyword">where</span> dt <span class="token operator">=</span> <span class="token number">20200603</span><span class="token operator">and</span> status_code <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">and</span> length<span class="token punctuation">(</span>uuid<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">and</span> url  <span class="token operator">like</span> 'https:<span class="token comment" spellcheck="true">//list.jd.com/list.html?cat=%' </span><span class="token keyword">group</span> <span class="token keyword">by</span> parse_url<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">'QUERY'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><h4 id="3）代码优化"><a href="#3）代码优化" class="headerlink" title="3）代码优化"></a>3）代码优化</h4><p>经过优化后的写法，因为分别计算商品和分类需要执行两次读取操作（<code>log_data</code>），所以这里用 <code>from... insert...</code> 方式只读取一次数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span>url<span class="token punctuation">,</span>uuid<span class="token punctuation">,</span>regexp_replace<span class="token punctuation">(</span>regexp_replace<span class="token punctuation">(</span>parse_url<span class="token punctuation">(</span>url <span class="token punctuation">,</span> <span class="token string">'PATH'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.html'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> goods_id<span class="token punctuation">,</span>parse_url<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">'QUERY'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> category_id<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>unix_timestamp<span class="token punctuation">(</span>localtime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> uuid <span class="token keyword">order</span> <span class="token keyword">by</span> unix_timestamp<span class="token punctuation">(</span>localtime<span class="token punctuation">)</span> <span class="token keyword">rows</span> <span class="token operator">between</span> <span class="token keyword">current</span> <span class="token keyword">row</span> <span class="token operator">and</span> <span class="token number">1</span> <span class="token keyword">following</span><span class="token punctuation">)</span>  <span class="token operator">-</span> unix_timestamp<span class="token punctuation">(</span>localtime<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">as</span> stay_time<span class="token keyword">from</span> log_data<span class="token keyword">where</span> dt <span class="token operator">=</span> <span class="token number">20200603</span><span class="token operator">and</span> status_code <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">and</span> length<span class="token punctuation">(</span>uuid<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token keyword">tempTable</span> <span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> fact_goods <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token number">20200603</span><span class="token punctuation">)</span> <span class="token keyword">select</span> goods_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> uuid<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>stay_time <span class="token operator">>=</span> <span class="token number">1800</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session_num<span class="token keyword">where</span> url <span class="token operator">like</span> 'https:<span class="token comment" spellcheck="true">//item.jd.com/%' </span><span class="token keyword">group</span> <span class="token keyword">by</span> goods_id<span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> fact_category <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token number">20200603</span><span class="token punctuation">)</span> <span class="token keyword">select</span> category_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> uuid<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>stay_time <span class="token operator">>=</span> <span class="token number">1800</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session_num<span class="token keyword">where</span> url  <span class="token operator">like</span> 'https:<span class="token comment" spellcheck="true">//list.jd.com/list.html?cat=%' </span><span class="token keyword">group</span> <span class="token keyword">by</span> category_id<span class="token punctuation">;</span></code></pre><h3 id="3-统计各个外部来源渠道的访客数（UV）"><a href="#3-统计各个外部来源渠道的访客数（UV）" class="headerlink" title="3.统计各个外部来源渠道的访客数（UV）"></a>3.统计各个外部来源渠道的访客数（UV）</h3><p>这里通过分析日志表中的“<code>referer_url</code>”确定外部来源，首先判断<code>“referer_url”</code>不为空并且为站外域名，其次取得站外来源的域名</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> fact_source <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token number">20200603</span><span class="token punctuation">)</span> <span class="token keyword">select</span> parse_url<span class="token punctuation">(</span>'https:<span class="token comment" spellcheck="true">//www.baidu.com/s?wd={query}','HOST') as source,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> uuid<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token keyword">where</span> referer_url <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">and</span> referer_url <span class="token operator">&lt;></span> <span class="token string">'-'</span> <span class="token operator">and</span> UPPER<span class="token punctuation">(</span>referer_url<span class="token punctuation">)</span> <span class="token operator">&lt;></span> <span class="token string">'NULL'</span> <span class="token operator">and</span> length<span class="token punctuation">(</span>referer_url<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">and</span> referer_url <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">'%jd.com%'</span> <span class="token operator">and</span> status_code <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">and</span> length<span class="token punctuation">(</span>uuid<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token keyword">group</span> <span class="token keyword">by</span> parse_url<span class="token punctuation">(</span>'https:<span class="token comment" spellcheck="true">//www.baidu.com/s?wd={query}','HOST');</span></code></pre><p>优化后我们结合上面的 <code>from... insert...</code> 语句</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span>url<span class="token punctuation">,</span>referer_url<span class="token punctuation">,</span>uuid<span class="token punctuation">,</span>regexp_replace<span class="token punctuation">(</span>regexp_replace<span class="token punctuation">(</span>parse_url<span class="token punctuation">(</span>url <span class="token punctuation">,</span> <span class="token string">'PATH'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.html'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> goods_id<span class="token punctuation">,</span>parse_url<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">'QUERY'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> category_id<span class="token punctuation">,</span>parse_url<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">'HOST'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> source<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>unix_timestamp<span class="token punctuation">(</span>localtime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> uuid <span class="token keyword">order</span> <span class="token keyword">by</span> unix_timestamp<span class="token punctuation">(</span>localtime<span class="token punctuation">)</span> <span class="token keyword">rows</span> <span class="token operator">between</span> <span class="token keyword">current</span> <span class="token keyword">row</span> <span class="token operator">and</span> <span class="token number">1</span> <span class="token keyword">following</span><span class="token punctuation">)</span>  <span class="token operator">-</span> unix_timestamp<span class="token punctuation">(</span>localtime<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">as</span> stay_time<span class="token keyword">from</span> log_data<span class="token keyword">where</span> dt <span class="token operator">=</span> <span class="token number">20200604</span><span class="token operator">and</span> status_code <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">and</span> length<span class="token punctuation">(</span>uuid<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token keyword">tempTable</span> <span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> fact_goods <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token number">20200604</span><span class="token punctuation">)</span> <span class="token keyword">select</span> goods_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> uuid<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>stay_time <span class="token operator">>=</span> <span class="token number">1800</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session_num<span class="token keyword">where</span> url <span class="token operator">like</span> 'https:<span class="token comment" spellcheck="true">//item.jd.com/%' </span><span class="token keyword">group</span> <span class="token keyword">by</span> goods_id<span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> fact_category <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token number">20200604</span><span class="token punctuation">)</span> <span class="token keyword">select</span> category_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> uuid<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>stay_time <span class="token operator">>=</span> <span class="token number">1800</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session_num<span class="token keyword">where</span> url  <span class="token operator">like</span> 'https:<span class="token comment" spellcheck="true">//list.jd.com/list.html?cat=%' </span><span class="token keyword">group</span> <span class="token keyword">by</span> category_id <span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> fact_source <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token number">20200604</span><span class="token punctuation">)</span> <span class="token keyword">select</span> source<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> uuid<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token keyword">where</span> referer_url <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">and</span> referer_url <span class="token operator">&lt;></span> <span class="token string">'-'</span> <span class="token operator">and</span> referer_url <span class="token operator">&lt;></span> <span class="token string">'null'</span> <span class="token operator">and</span> length<span class="token punctuation">(</span>referer_url<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8</span> <span class="token operator">and</span> referer_url <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">'%jd.com%'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> source<span class="token punctuation">;</span></code></pre><h2 id="五、编写自动运行脚本"><a href="#五、编写自动运行脚本" class="headerlink" title="五、编写自动运行脚本"></a>五、编写自动运行脚本</h2><p>1、在<code>/usr/local/qst</code>目录下创建项目目录<code>data_helper</code>，并在<code>data_helper</code>下创建如下目录</p><table><thead><tr><th>bin</th><th>存放运行脚本及代码</th></tr></thead><tbody><tr><td>conf</td><td>存放配置文件</td></tr><tr><td>data</td><td>数据</td></tr><tr><td>lib</td><td>类库</td></tr><tr><td>log</td><td>日志文件</td></tr><tr><td>tmp</td><td>临时文件</td></tr></tbody></table><p>2、编写控制脚本<code>main.sh</code> （<code>bin</code>文件夹）<br>3、编写<code>Hive</code>脚本<code>user_action.sql</code> （文件夹）<br>4、设置自动运行任务（<code>crontab</code>）</p><pre><code>0 3 * * * /usr/local/qst/data_helper/bin/main.sh</code></pre><pre><code>参考资料：hive函数https://www.cnblogs.com/end/archive/2012/06/18/2553682.htmlhive from... insert... 语句http://blog.chinaunix.net/uid-30041424-id-5766715.htmlOracle开窗函数（Hive参照Oracle的开窗函数实现了相同功能）https://blog.csdn.net/qq_41708308/article/details/89374701https://blog.csdn.net/qq_33879355/article/details/78447430UTM参数https://blog.csdn.net/yiguanfangzhou/article/details/94559120linux crontab用法https://blog.csdn.net/yeguxin/article/details/79543514linux crontab测试https://tool.lu/crontab#!/bin/bash和#!/bin/sh是什么意思以及区别https://blog.csdn.net/u010486679/article/details/78534841/bin/bash^M: 坏的解释器: 没有那个文件或目录https://blog.csdn.net/ouyang_peng/article/details/86488451sed -i 's/\r$//' /usr/local/qst/data_helper/bin/main.sh</code></pre><hr><p><strong>生活坏到一定程度就会好起来，因为他无法更坏，努力过后，才知道许多事情，坚持坚持，就来了。 ——宫崎骏</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 大数据开发技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符编码详解</title>
      <link href="/2020/05/28/zi-fu-bian-ma-xiang-jie/"/>
      <url>/2020/05/28/zi-fu-bian-ma-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是字符编码？"><a href="#什么是字符编码？" class="headerlink" title="什么是字符编码？"></a>什么是字符编码？</h2><ul><li>字符编码是人为的定义的一套<strong>转换表</strong>。</li><li>在字符编码中规定了一系列的文字对应的二进制。</li><li>字符编码其实<strong>本质</strong>上就是一本字典，该字段中描述了文字与二进制之间的对照关系。</li><li>字符编码是人为规定的。（是某个计算机协会规定的。）</li></ul><p>​    字符编码涉及到<strong>编码</strong>和<strong>解码</strong>两个过程，编码和解码的时候必须采用同一套字符编码方式，不然就会出现乱码。</p><h2 id="字符编码的发展过程"><a href="#字符编码的发展过程" class="headerlink" title="字符编码的发展过程"></a>字符编码的发展过程</h2><p>​        起初的时候计算机是不支持文字的，只支持科学计算。实际上计算机起初是为了<br>​        战争而开发的：计算导弹的轨道….</p><p>​        后来随着计算机的发展，计算机开始支持文字，最先支持的文字是英文，英文<br>​        对应的字符编码方式是：ASCII码。</p><p>​        <code>ASCII</code>码采用<code>1byte</code>进行存储，因为英文字母是26个。（键盘上所有的键全部算上也<br>​        超不过256个。<code>1byte</code>可以表示256种不同的情况。所以英文本身在计算机方面就占有<br>​        优势。）<br>​            <code>'a'</code> –(采用ASCII码进行编码)-&gt; <code>01100001</code><br>​            01100001 –(采用ASCII码进行解码)-&gt; ‘a’<br>​            <strong><em>如果编码和解码采用的不是同一个编码方式，会出现乱码。</em></strong><br>​            ‘b’ —&gt; 98<br>​            ‘c’ —&gt; 99…<br>​            ‘a’ —&gt; 97</p><p>​            ‘A’ —&gt; 65<br>​            ‘B’ —&gt; 66<br>​            …</p><p>​            ‘0’ —&gt; 48  （这个’0’不是那个0，是文字’0’）<br>​            ‘1’ —&gt; 49<br>​<br>​        随着计算机语言的发展，后来国际标准组织制定了<code>ISO-8859-1</code>编码方式，<br>​        又称为<code>latin-1</code>编码方式，向上兼容<code>ASCII</code>码。但不支持中文。</p><p>​        后来发展到亚洲，才支持中文，日文，韩文….<br>​        中文这块的编码方式：<code>GB2312&lt;GBK&lt;GB18030</code> （容量的关系）<br>​        以上编码方式是简体中文。</p><p>​        繁体中文：<code>big5</code>（台湾使用的是大五码。）</p><p>​        在java中，java语言为了支持全球所有的文字，采用了一种字符编码方式<br>​        叫做<code>unicode</code>编码。<code>unicode</code>编码统一了全球所有的文字，支持所有文字。<br>​        具体的实现包括：<code>UTF-8</code> <code>UTF-16</code> <code>UTF-32</code>….<br>​<br>​    需要记住：<br>​        </p><pre class=" language-markdown"><code class="language-markdown">ASCII（'a'是97 'A'是65 '0'是48...）ISO-8859-1（latin-1）GB2312GBKGB18030Big5unicode（utf8 utf16 utf32）</code></pre><hr><p><strong>我们终其一生，就是要摆脱他人的期待，找到真正的自己。——无声告白</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 字符编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础</title>
      <link href="/2020/05/20/c-ji-chu/"/>
      <url>/2020/05/20/c-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础"><a href="#C-基础" class="headerlink" title="C++基础"></a>C++基础</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><pre><code>Visual Studio：创建新项目——VisualC++——空项目——填写项目名——填写项目路径——确定</code></pre><h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><p>给C++文件起个名称，然后点击添加即可。</p><h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int main() {    cout << "Hello world" << endl;    system("pause");    return 0;}</code></pre><p> 运行程序输出结果</p><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，==对该段代码做整体说明==</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><p><strong>示例：</strong> </p><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;//这是单行注释  嘿嘿int main() {    system("pause");/*你看！我就是多行注释！不错吧！比你厉害！！！*/    return 0;}</code></pre><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><pre class=" language-C++"><code class="language-C++">#include<iostream>using namespace std;int main() {    //变量的定义    //语法：数据类型  变量名 = 初始值    int a = 10;    cout << "a = " << a << endl;    system("pause");    return 0;}</code></pre><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul><li>==通常在文件上方定义==，表示一个常量</li></ul></li></ol><ol start="2"><li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><pre class=" language-C++"><code class="language-C++">#include<stream>using namespace std;//1、宏常量#define day 7int main() {    cout << "一周里总共有 " << day << " 天" << endl;    //day = 8;  //报错，宏常量不可以修改    //2、const修饰变量    const int month = 12;    cout << "一年里总共有 " << month << " 个月份" << endl;    //month = 24; //报错，常量是不可以修改的    system("pause");    return 0;}</code></pre><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;int main() {    //int int = 10; 1.标识符不可以是关键字    int abc = 11;    //int 8asc = 22;     //3.标识符第一个字符只能是字母或下划线    int _asd = 33;    //2.标识符是由字母，数字，下划线构成    //标识符是区分大小写的    int aaa = 88;    //int AAA = 100;错误 标识符是区分大小写的    cout << "变量值是：" << aaa << endl;    system("pause");    return 0;}</code></pre><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;int main() {    short num1 = 10;    int num2 = 10;    long num3 = 10;    long long num4 = 10;    system("pause");    return 0;}</code></pre><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><pre class=" language-C++"><code class="language-C++">#include <iostream>using namespace std;int main() {    cout << "short 类型所占内存空间为： " << sizeof(short) << endl;    cout << "int 类型所占内存空间为： " << sizeof(int) << endl;    cout << "long 类型所占内存空间为： " << sizeof(long) << endl;    cout << "long long 类型所占内存空间为： " << sizeof(long long) << endl;    system("pause");    return 0;}</code></pre><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><pre class=" language-C++"><code class="language-C++">#include <iostream>using namespace std;int main() {    float f1 = 3.14f;//通常在float类型的后面会加上f，否则系统会默认当成double类型，再转化赋值。    cout << f1 << endl;    double d1 = 3.14;    cout << d1<< endl;    cout << "float  sizeof = " << sizeof(f1) << endl;    cout << "double sizeof = " << sizeof(d1) << endl;    //科学计数法    float f2 = 3e2; // 3 * 10 ^ 2     cout << "f2 = " << f2 << endl;    float f3 = 3e-2;  // 3 * 0.1 ^ 2    cout << "f3 = " << f3 << endl;    system("pause");    return 0;}</code></pre><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = 'a';</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><pre class=" language-C++"><code class="language-C++">#include<iostream>using namespace std;int main() {    //1.字符型变量创建方式    char ch = 'a';    cout << ch << endl;    //2.字符型变量所占内存大小    cout << sizeof(char) << endl;    //3.字符型类型常见的错误    //ch = "b"; //错误，不可以用双引号    //ch = 'abcde'; //错误，单引号内只能引用一个字符    cout << (int)ch << endl;  //查看字符a对应的ASCII码    ch = 97; //可以直接用ASCII给字符型变量赋值    cout << ch << endl;    //a-97   A-65    system("pause");    return 0;}</code></pre><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><p>持续更新……</p><hr><p><strong>我还有改变的可能性。一想起这一点，我就心潮澎湃。——北野武</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的快捷键</title>
      <link href="/2020/05/20/chang-yong-de-kuai-jie-jian/"/>
      <url>/2020/05/20/chang-yong-de-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h3 id="常用的组合键"><a href="#常用的组合键" class="headerlink" title="常用的组合键"></a>常用的组合键</h3><p>​        复制    <code>ctrl + c</code><br>​        粘贴    <code>ctrl + v</code><br>​        剪切    <code>ctrl + x</code><br>​        保存    <code>ctrl + s</code><br>​        撤销    <code>ctrl + z</code><br>​        重做    <code>ctrl + y</code><br>​        全选：<code>ctrl + a</code><br>​        查找：<code>ctrl + f</code></p><p>​        回到行首：<code>home</code>键<br>​        回到行尾：<code>end</code>键</p><p>​        当光标在行尾，选中一行<br>​        <code>shift + home</code>键</p><p>​        当光标在行首，选中一行<br>​        <code>shift + end</code>键</p><p>​        回到文件头：<code>ctrl + home</code><br>​        回到文件尾：<code>ctrl + end</code></p><p>​        选中一个单词：鼠标双击<br>​        选中一行：鼠标连续击3次</p><p>​        不用鼠标选中一个单词：<code>ctrl + shift</code> + 右箭头/左箭头</p><hr><p><strong>有些笑容背后是紧咬牙关的灵魂。 ——柴静</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发基础 </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用DOS命令</title>
      <link href="/2020/05/19/chang-yong-dos-ming-ling/"/>
      <url>/2020/05/19/chang-yong-dos-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的DOS命令"><a href="#常用的DOS命令" class="headerlink" title="常用的DOS命令"></a>常用的<code>DOS</code>命令</h2><h3 id="什么是DOS命令？"><a href="#什么是DOS命令？" class="headerlink" title="什么是DOS命令？"></a>什么是<code>DOS</code>命令？</h3><p>​        在<code>DOS</code>命令窗口中才可以输入并执行<code>DOS</code>命令。<br>​        在最初的<code>windows</code>计算机中没有图形界面的，只有<code>DOS</code>命令窗口。<br>​        也就是说通过执行<code>DOS</code>命令窗口可以完全完成文件的新建、编辑、保存、删除<br>​        等一系列操作。</p><h3 id="打开DOS命令窗口的方法"><a href="#打开DOS命令窗口的方法" class="headerlink" title="打开DOS命令窗口的方法"></a>打开<code>DOS</code>命令窗口的方法</h3><p>​        1.<code>win</code>键 + <code>r</code> （组合键）：可以打开“运行”窗口<br>​            在运行窗口文本框中输入: <code>cmd</code><br>​            然后回车</p><p>​        2.也可以直接在制定文件夹的地址栏中输入<code>cmd</code>，回车打开</p><h3 id="DOS命令默认打开位置"><a href="#DOS命令默认打开位置" class="headerlink" title="DOS命令默认打开位置"></a><code>DOS</code>命令默认打开位置</h3><p>​        <code>C:\Users\Administrator</code>这是默认的当前路径</p><h3 id="在DOS命令窗口中如何复制内容"><a href="#在DOS命令窗口中如何复制内容" class="headerlink" title="在DOS命令窗口中如何复制内容"></a>在<code>DOS</code>命令窗口中如何复制内容</h3><p>​        <code>win7</code>:任意位置点击右键–&gt;标记–&gt;选中要复制的内容–&gt;点击右键–&gt;此时就到剪贴板里面了<br>​        <code>win10</code>：左键直接选中，然后右键单击一下就到剪贴板里面了。</p><h3 id="新建目录mkdir"><a href="#新建目录mkdir" class="headerlink" title="新建目录mkdir"></a>新建目录<code>mkdir</code></h3><p>​        <code>mkdir abc  (make directory)</code><br>​        创建一个目录，起名<code>abc</code></p><h3 id="切换盘符"><a href="#切换盘符" class="headerlink" title="切换盘符"></a>切换盘符</h3><p>​        直接输入盘符：<br>​                <code>c</code>: 回车<br>​                <code>d</code>: 回车<br>​                <code>e</code>: 回车<br>​                <code>f</code>: 回车<br>​        当切换到D盘根下了，那么当前路径就是：D:&gt;<br>​        当前路径是当前所在的位置。</p><h3 id="切换目录cd"><a href="#切换目录cd" class="headerlink" title="切换目录cd"></a>切换目录<code>cd</code></h3><p>​        <code>cd：change directory</code>(改变目录)</p><h4 id="cd命令用法"><a href="#cd命令用法" class="headerlink" title="cd命令用法"></a>cd命令用法</h4><p>​        <code>cd</code> 路径      路径在<code>windows</code>系统上包括：相对路径和绝对路径。</p><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>​        一定要注意，从路径形式上来看，相对路径是一定不会以盘符开始的。<br>​        相对路径：相对路径一定是相对于当前所在“位置”而言的。<br>​        相对路径是相对于当前而言，从当前所在的位置作为起点。</p><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>​        在windows操作系统中凡是路径起点是盘符的都是绝对路径，例如：</p><pre><code>C:\UsersC:\Users\Public\gakatakaC:\Windows\System32D:\BaiduNetdiskDownloadD:\course\OneNote </code></pre><p>​        注意：<br>​        <code>cd ..</code>回到上级路径。<br>​        <code>cd \</code>直接回到根路径。<br>​        <code>.</code>一个点，代表当前路径。</p><h3 id="清屏-cls"><a href="#清屏-cls" class="headerlink" title="清屏 cls"></a>清屏 <code>cls</code></h3><h3 id="查看当前目录下有啥东西-dir"><a href="#查看当前目录下有啥东西-dir" class="headerlink" title="查看当前目录下有啥东西 dir"></a>查看当前目录下有啥东西 <code>dir</code></h3><h3 id="退出DOS命令窗口exit"><a href="#退出DOS命令窗口exit" class="headerlink" title="退出DOS命令窗口exit"></a>退出DOS命令窗口<code>exit</code></h3><h3 id="删除命令-del"><a href="#删除命令-del" class="headerlink" title="删除命令 del"></a>删除命令 <code>del</code></h3><p>​        <code>del</code>命令，删除一个或者多个文件<br>​        删除<code>T1.class</code>文件:<br>​        <code>C:\Users\Administrator&gt;del T1.class</code><br>​        删除所有<code>.class</code>结尾的文件，支持模糊匹配:<br>​        <code>C:\Users\Administrator&gt;del *.class</code></p><p>​        <code>T1.class</code><br>​        <code>T1.glass</code><br>​        <code>del *ass</code> 这个命令就会将<code>T1.class</code>和<code>T1.glass</code>都删除。<br>​        删除的一定是能匹配上的。<br>​        <code>del *.class</code>这个命令中的那个<code>.</code>不要特殊化，这个<code>.</code>其实就是一个普通的字母</p><h3 id="查看本机的IP地址"><a href="#查看本机的IP地址" class="headerlink" title="查看本机的IP地址"></a>查看本机的<code>IP</code>地址</h3><h4 id="什么是IP地址？有什么用呢？"><a href="#什么是IP地址？有什么用呢？" class="headerlink" title="什么是IP地址？有什么用呢？"></a>什么是<code>IP</code>地址？有什么用呢？</h4><p>​        <code>A</code>计算机在网络当中要想定位到（连接到）<code>B</code>计算机，那么必须要先<br>​        知道B计算机的<code>IP</code>地址，<code>IP</code>地址也可以看做计算机在同一个网络当中的<br>​        身份证号（唯一标识）。<br>​        <code>IP</code>地址就相当于电话号码是一个意思。<br>​        <code>ipconfig</code>（<code>ip</code>地址的配置信息。）</p><p>​        <code>ipconfig /all</code>该命令后面添加一个<code>/all</code>参数可以查看更详细的网络信息。<br>​        这个详细信息中包括网卡 的物理地址，例如：<code>70-8B-CD-A7-BA-25</code><br>​        这个物理地址具有全球唯一性。物理地址通常叫做<code>MAC</code>地址。</p><h3 id="如何查看两台计算机是否可以正常通信"><a href="#如何查看两台计算机是否可以正常通信" class="headerlink" title="如何查看两台计算机是否可以正常通信"></a>如何查看两台计算机是否可以正常通信</h3><p>​        <code>ping</code>命令<br>​        语法格式：<br>​                <code>ping IP</code>地址<br>​                <code>ping</code>域名<br>​        </p><pre><code>    ping www.baidu.com    ping 61.135.169.121  （61.135.169.121是百度的IP地址）    ping 61.135.169.121 -t （-t参数表示一直ping）    一直ping的目的可以查看网络是否稳定。</code></pre><p>​        在一个<code>DOS</code>命令窗口中如果有一个命令一直在执行，想强行终止怎么办？<br>​        <code>ctrl + c</code>组合键<br>​<br>​        <code>http://www.baidu.com</code>可以打开百度（这种方式比较方便，域名更容易记忆。）<br>​        <code>http://61.135.169.121</code>也可以打开百度</p><p>​        域名底层最终还是会被解析成<code>IP</code>地址的形式。</p><hr><p><strong>由于我的无知，我对生存方式只有一个非常普通的信条：不许后悔。——坂口安吾</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOS命令 </tag>
            
            <tag> 开发基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记</title>
      <link href="/2020/05/19/java-xue-xi-bi-ji/"/>
      <url>/2020/05/19/java-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="计算机编程语言发展史"><a href="#计算机编程语言发展史" class="headerlink" title="计算机编程语言发展史"></a>计算机编程语言发展史</h2><h3 id="第一代语言：机器语言"><a href="#第一代语言：机器语言" class="headerlink" title="第一代语言：机器语言"></a>第一代语言：机器语言</h3><p>　　程序员直接编写二进制,一串二进制代码，例如：<code>10010100010010001000....</code><br>　　计算机是由电流驱动的，电流只能表示两种状态：正、负。<br>　　而正可以对应1，负可以对应0.<br>　　<code>10010010101010...</code>这些二进制码正好和自然世界中的十进制存在转换关系。<br>　　所以很巧妙的是：计算机可以模拟现实世界当中的事物。</p><p>　　机器语言时期非常具有代表性的就是：<strong>打孔机</strong></p><p><strong>缺点：</strong></p><p>　　纸带不容易保存<br>　　另外打孔的时候是人为操作的，孔有可能打错了,孔打错了纸带就废了。</p><h3 id="第二代语言：低级语言"><a href="#第二代语言：低级语言" class="headerlink" title="第二代语言：低级语言"></a>第二代语言：低级语言</h3><p>　　非常具有代表性的：<strong>汇编语言</strong><br>　　汇编语言比机器语言更接近人类自然语言。<br>　　但是汇编语言还是需要专业人士进行开发，一般人拿到汇编语言也读不懂。</p><h3 id="第三代语言：高级语言"><a href="#第三代语言：高级语言" class="headerlink" title="第三代语言：高级语言"></a>第三代语言：高级语言</h3><p>　　高级语言完全接近人类自然语言，具有代表性的：<br>            　C语言：面向过程的<br>        　    C++语言：一半面向过程，一半面向对象<br>            　Java语言：完全面向对象（java语言底层实际上是C++实现的。）<br>            　Python语言：面向对象<br>        　    ….</p><h3 id="计算机编程语言是什么？"><a href="#计算机编程语言是什么？" class="headerlink" title="计算机编程语言是什么？"></a>计算机编程语言是什么？</h3><p>　　是一个团队，或者一个组织制定的一套固定的语法规则，你可以学习这套语法规则，然后通过这套语法规则和计算机交互。</p><h2 id="Java语言的概述"><a href="#Java语言的概述" class="headerlink" title="Java语言的概述"></a>Java语言的概述</h2><p>　JDK（Java开发工具箱，做Java开发必须安装的，这是最根本的一个环境。）<br>　JDK不是集成开发环境。<br>　JDK这个开发工具箱中是Java最核心的库。</p><p>　98年的时候：Java升级到JDK1.2，Java被分为三大块：<br>　　　J2SE：标准版（基础，要学java，必须先学习SE。基础语法+基础库）<br>　　　J2EE：企业版（专门为企业开发软件，为企业提供解决方案。例如：OA办公系统，保险行业的系统，金融行业的系统，医院系统….）<br>　　　J2ME：微型版（专门为微型设备做嵌入式开发的。）<br>　　　java诞生十周年改了名字：<br>　　　　　JavaSE<br>　　　　　JavaEE<br>　　　　　JavaME</p><h2 id="Java语言的特性"><a href="#Java语言的特性" class="headerlink" title="Java语言的特性"></a>Java语言的特性</h2><h3 id="简单性"><a href="#简单性" class="headerlink" title="简单性"></a>简单性</h3><p>　　在Java语言当中真正操作内存的是：JVM（Java虚拟机）<br>        　所有的java程序都是运行在Java虚拟机当中的。<br>        　而Java虚拟机执行过程中再去操作内存。<br>        　对于C或者C++来说程序员都是可以直接通过指针操作内存的。<br>        　C或者C++更灵活，可以直接程序员操作内存，但是要求程序员技术精湛。<br>        　C语言或者C++更有驾驭感。</p><p>　　Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员不能直接操作内存。这种方式有优点也有缺点：<br>            <strong>优点：</strong>不容易导致内存泄漏。（简单了。）<br>            <strong>缺点：</strong>效率问题，包括驾驭感比较差。　　</p><p>　　Java语言底层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。<br>    　安装了JDK之后，JVM就代表安装好了。</p><h3 id="内存是什么？"><a href="#内存是什么？" class="headerlink" title="内存是什么？"></a>内存是什么？</h3><pre><code>对于计算机来说：最主要的几个部件CPU：　　　中央处理器，相当于人类的大脑，负责发送并执行指令，是整个计算机的指挥官。            CPU是负责计算的，负责运算的。            10 + 20 = 30            CPU负责将30这个结果计算出来。            但是在计算过程中有三个数据需要临时找个空间存储一下：            这三个数据分别是：10 20 30内存：     程序运行过程当中的临时数据存储空间。     断电之后或者关机之后内存中的数据就消失了。硬盘：　　　持久化设备，硬盘上的数据不会因断电而丢失。主板：　　　相当于人类的躯干，是一个载体：            CPU、内存条、硬盘等主要的部件都是放在主板上的，            主板上有很多线，将以上的部件链接起来。</code></pre><h3 id="java完全面向对象的"><a href="#java完全面向对象的" class="headerlink" title="java完全面向对象的"></a>java完全面向对象的</h3><p>　　面向对象更容易让人理解，人类通常是以对象的方式认知世界的。<br>　　采用面向对象的方式可以让复杂问题简单化。</p><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><p>　　主要是因为Java中有一种机制：<br>　　　　自动垃圾回收机制（GC机制）<br>　　java语言是健壮的，相对于C语言来说，C语言没有Java健壮<br>　　Java不容易导致内存的泄漏<br>　　C++或者C语言使用不当时很容易导致内存泄漏<br>　　JVM负责调度GC机制。程序员不需要干涉</p><p>　　JVM：C++语言写的一个虚拟的计算机</p><p>　　GC：垃圾回收机制</p><h3 id="java完全-完美支持多线程并发"><a href="#java完全-完美支持多线程并发" class="headerlink" title="java完全/完美支持多线程并发"></a>java完全/完美支持多线程并发</h3><h3 id="可移植性-跨平台"><a href="#可移植性-跨平台" class="headerlink" title="可移植性/跨平台"></a>可移植性/跨平台</h3><p>　java语言只要编写一次，可以做到到处运行<br>　　　例如：java程序编写完之后，可以运行在windows操作系统上，不需要做任何改动可以直接运行在Linux操作系统上，同样也可以运行到MaC OS上面。<br>　　　一次编写，到处运行。（平台改变了，程序不需要改。）</p><p>　JVM这种机制实现了跨平台，那么这种机制优点和缺点分别是什么？<br>　　　<strong>优点：</strong>一次编写到处运行，可以跨平台。<br>　　　<strong>缺点：</strong>麻烦。对于运行java程序来说必须先有一个JVM,就像你要想在网页上看视频，你必须先安装一个flash是一样的。</p><h2 id="Java体系三大块"><a href="#Java体系三大块" class="headerlink" title="Java体系三大块"></a>Java体系三大块</h2><p>　　JavaSE：标准版<br>        JavaEE：企业版<br>        JavaME：微型版</p><p>安装JDK之后：<br>        JDK：java开发工具箱<br>        JRE：Java运行环境<br>        JVM：Java虚拟机</p><p>　Java程序从编译到运行经历了两个阶段：</p><p>　　<strong>编译阶段</strong></p><p>　　<strong>运行阶段</strong></p><p><strong>注意</strong>：</p><p>　java程序员直接编写的java代码（普通文本）是无法执行被JVM<br>    识别的。java程序员编写的java代码这种普通文本必须经过一个编译，<br>    将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。<br>    java代码这种普通文本变成字节码的过程，被称为：<strong>编译</strong>。</p><p>　java代码这种普通文本被称为：<code>java源代码</code>。（你编写的代码是源代码）<br>　源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”<br>　JVM可以识别的是字节码。</p><p>　放源代码的文件扩展名必须是：<code>xxx.java</code></p><p>　编译生成的字节码文件扩展名是：<code>xxx.class</code></p><p><strong>.java文件就是源文件，这个文件中编写源代码。</strong><br><strong>.class文件就是字节码文件，这个文件是编译源代码而得到的。</strong></p><p><strong>问题</strong>：字节码文件是二进制文件吗？<br>        字节码文件不是二进制文件。<br>        如果是二进制的话，就不需要JVM了。<br>        因为操作系统可以直接执行二进制。</p><h2 id="对Java的加载与执行的理解"><a href="#对Java的加载与执行的理解" class="headerlink" title="对Java的加载与执行的理解"></a>对Java的加载与执行的理解</h2><p>java程序从开发到最终运行的过程：</p><p>​    <strong>编译期：</strong>（可以在windows上）<br>​        第一步：在硬盘的某个位置（随意），新建一个xxx.java文件<br>​        第二步：使用记事本或者其它文本编辑器打开xxx.java文件<br>​        第三步：在xxx.java文件中编写“符合java语法规则的”源代码。<br>​        第四步：保存（一定要将xxx.java文件保存一下）<br>​        第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。</p><p>​        第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，<br>​        如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器<br>​        报错之后class文件是不会生成的，只有编译通过了才会生成class字节码文件。<br>​        并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）</p><p>​    <strong>运行期（JRE在起作用）：</strong>（可以在windows上，也可以在其他的OS上。）<br>​        第七步：如果是在Linux上运行，需要将windows上生成的class文件拷贝过去<br>​        不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）</p><p>​        第八步：使用JDK自带的一个命令/工具：java（负责运行的命令/工具）执行字节码</p><p>​        第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。<br>​        JVM会将字节码文件装载进去，然后JVM对字节码进行解释（解释器负责将字节码<br>​        解释为1010101010..等的二进制）</p><p>​        第十步：JVM会将生成的二进制码交给OS操作系统，操作系统会执行二进制码和<br>​        硬件进行交互。</p><p>注意：在以上的过程中，需要使用两个非常重要的命令？</p><p>　<strong>javac 命令，负责编译</strong><br>    <strong>java 命令，负责运行</strong></p><p><strong>注意：</strong><br>    xxx.java源文件经过编译之后生成了A.class、B.class、C.class等文件，<br>    那么我们称A是一个类、B是一个类、C是一个类。其中A、B、C是类的名字。<br>    A/B/C是类的名称：A类、B类、C类。</p><p>源文件中编写的代码叫做：<code>源代码</code></p><p>以上是一个复杂的过程，那么缩减一下，程序员到底要干啥？<br>    新建java文件<br>    打开java文件<br>    写java源代码<br>    保存<br>    javac命令编译<br>    java命令运行</p><p>​    <strong>编写、编译、运行</strong></p><h2 id="编写HelloWorld"><a href="#编写HelloWorld" class="headerlink" title="编写HelloWorld"></a>编写HelloWorld</h2><h3 id="第一步：安装文本编辑器"><a href="#第一步：安装文本编辑器" class="headerlink" title="第一步：安装文本编辑器"></a>第一步：安装文本编辑器</h3><h3 id="第二步：安装JDK（先下载JDK）"><a href="#第二步：安装JDK（先下载JDK）" class="headerlink" title="第二步：安装JDK（先下载JDK）"></a>第二步：安装JDK（先下载JDK）</h3><p>​    安装JDK，直接下一步</p><p>​    <strong>注意：</strong><br>​        JDK8安装的时候，不仅JDK内置了一个JRE，而且还会在JDK目录之外<br>​        独立的生成一个单独的JRE。（以前低版本的时候，JRE实际上是有2个。）<br>​        一个是JDK内置的，一个是独立于JDK之外的。<br>​<br>​    JDK的bin目录下有：<br>​    </p><p>​        javac.exe 负责编译<br>​        java.exe 负责运行</p><h3 id="第三步：写代码"><a href="#第三步：写代码" class="headerlink" title="第三步：写代码"></a>第三步：写代码</h3><p>​    写一下第一个程序HelloWorld</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这是一个类，类名叫做HelloWorld</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    括号：[]、()、{}都要成对写。</p><h3 id="第四步：编译"><a href="#第四步：编译" class="headerlink" title="第四步：编译"></a>第四步：编译</h3><h3 id="第五步：运行"><a href="#第五步：运行" class="headerlink" title="第五步：运行"></a>第五步：运行</h3><p>程序写完之后，一定要<code>ctrl + s</code> 进行保存<br><strong>需要注意的是：java源代码只要修改，必须重新编译，重新编译生成新的class字节码文件。</strong></p><hr><h3 id="编译阶段详解："><a href="#编译阶段详解：" class="headerlink" title="编译阶段详解："></a>编译阶段详解：</h3><p>javac命令：<br>​            javac 　java源文件的路径<br>​        java源文件：<br>​            java源文件的名字以“.java”结尾，该文件中写了java源代码。<br>​        java源文件的路径：<br>​            注意：路径永远包括<strong>绝对路径</strong>和<strong>相对路径</strong>。<br>​<br>​        注意：把java源文件直接拖进到DOS命令窗口，那么DOS命令窗口就有这个路径了。<br>​<br>​    </p><pre><code>    C:\Users\Administrator&gt;javac D:\course\JavaProjects\02-JavaSE\chapter01\HelloWorld.java​        D:\&gt;javac course\JavaProjects\02-JavaSE\chapter01\HelloWorld.java​        D:\course\JavaProjects&gt;javac 02-JavaSE\chapter01\HelloWorld.java​        D:\course\JavaProjects\02-JavaSE\chapter01&gt;javac HelloWorld.java</code></pre><p>​        以上的四种方式都行，第一种方式是绝对路径<br>​        剩下三种方式都是相对路径。</p><p>​        <strong>注意：</strong><br>​            怎么在DOS命令窗口中快速定位到某个路径呢？<br>​            打开计算机–&gt;打开一些文件夹–&gt;在地址栏上直接输入cmd回车，这样直接就过去了。<br>​        </p><h3 id="运行阶段详解："><a href="#运行阶段详解：" class="headerlink" title="运行阶段详解："></a>运行阶段详解：</h3><p>​    运行的前提是：class文件（字节码）生成了。没有字节码文件程序是无法运行的。<br>​        假设该文件的名字叫做：<code>HelloWorld.class</code><br>​        那么<code>HelloWorld</code> 就是一个类名。</p><p>​    如果文件名是<code>Test.class</code>，那么：<code>Test</code>就是一个类名。</p><p>怎么运行，使用哪个命令？<br>    使用JDK的bin目录下的：<code>java.exe</code>命令来运行。</p><p><strong>先在DOS命令窗口中测试java.exe这个命令是否可用</strong><br>    <code>java -version</code></p><p>“<code>java.exe</code>“这个命令怎么用，语法格式<br>    java 类名</p><p>java HelloWorld.class 对不对？<br>    <strong>不对！！！！</strong><br>正确的写法是：<br>    <strong>java HelloWorld</strong></p><p><strong>注意</strong>：java这个命令，后面跟的是“类名”，而绝对不能跟“文件路径”，<br>因为java命令后面跟的不是文件，是一个“类名”。</p><p>​    对于这个字节：Test.class    ，应该：java Test<br>​    对于这个字节码：A.class ，应该 java A<br>​    对于这个字节码：Hello.class，应该java Hello<br>​    …..</p><p>​    运行java程序需要哪些步骤呢？</p><p>​        第一步：<br>​            先使用cd命令切换到Test.class文件所在的路径。</p><p>​        第二步：执行java Test</p><p>​        切记：<br>​            java命令后面只能跟类名。</p><h3 id="“java-HelloWorld”的执行过程以及原理"><a href="#“java-HelloWorld”的执行过程以及原理" class="headerlink" title="“java HelloWorld”的执行过程以及原理"></a>“java HelloWorld”的执行过程以及原理</h3><p>D:\course\JavaProjects\02-JavaSE\chapter01&gt;java HelloWorld<br>敲完回车，都发生了什么？</p><ul><li><p>第一步：会先启动JVM（java虚拟机）</p></li><li><p>第二步：JVM启动之后，JVM会去启动“类加载器classloader”<br>​    类加载器的作用：加载类的。</p><p>本质上类加载器负责去硬盘上找“类”对应的“字节码”文件：<br>​    假设是“java HelloWorld”，那么类加载器会去硬盘上搜索：HelloWorld.class文件。<br>​    假设是“java Test”，那么类加载器会去硬盘上搜索：Test.class文件。<br>​    …….</p></li><li><p>​    第三步：检查<br>​        类加载器如果在硬盘上找不到对应的字节码文件，会报错：<br>​            　错误: 找不到或无法加载主类<br>​        类加载器如果在硬盘上找到了对应的字节码文件，类加载器会将该字节码<br>​        文件装载到<code>JVM</code>当中，<code>JVM</code>启动“解释器”将字节码解释为“101010000…”这种<br>​        二进制码，操作系统执行二进制码和硬件交互。<br>​        </p><p>​        <strong>注意：默认情况下类加载器（classloader）会从当前路径下寻找“字节码”文件。</strong>    </p></li></ul><p>  <strong>问题：</strong></p><p>  能不能给类加载器指定一个路径，让类加载器去指定的路径下加载字节码文件。<br>  答案：可以的。但是我们需要设置一个环境变量，叫做：classpath</p><p>　　classpath是一个环境变量是给“类加载器”指路的。</p><p>　　classpath环境变量不属于windows操作系统，classpath环境变量隶属于java。</p><p>　　classpath环境变量是java特有的。<br>　    classpath=A路径;B路径;C路径…..<br>　    classpath是一个变量名<br>    　A路径;B路径;C路径…..是变量值</p><p>我们把classpath配置一下，这个环境变量在windows中没有，需要新建：<br>    <strong>计算机–&gt;右键–&gt;属性–&gt;高级系统设置–&gt;环境变量–&gt;新建…</strong></p><p>注意：变量名不能随意写：大小写无所谓，但必须叫做：<code>classpath</code><br>    CLASSPATH<br>    ClassPath<br>    Classpath<br>    classpath<br>    都可以</p><p>　我目前是随意配置的：（重启CMD）<br>    classpath=D:\course<br>    <strong>非常重要：</strong><br>        配置了classpath=D:\course之后，类加载器只会去D:\course目录下找“xxx.class”文件<br>        不再从当前路径下找了。</p><h3 id="入门程序代码详解"><a href="#入门程序代码详解" class="headerlink" title="入门程序代码详解"></a>入门程序代码详解</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    1、在java中任何有效的代码必须写到“类体”当中，最外层必须是一个类的定义。    2、public表示公开的，class表示定义一个类，Test是一个类名。类名后面必须是    一对大括号，这一对大括号被称为“类体”    3、大括号必须是成对的。并且建议都要成对编写，这样才不会丢掉。        {}        []        ()    4、什么时候代码缩进？        我包着你，你就比我低一级。你就需要缩进。        没有合理的缩进，代码可读性很差。        或者也可以这样所，大括号里的都需要缩进。        缩进就是可读性问题，不缩进也不影响程序的编译和执行。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 声明/定义一个公开的类，起个名字叫Test</span>    <span class="token comment" spellcheck="true">// 类体</span>    <span class="token comment" spellcheck="true">// 整个这一块的代码被称为：main方法（程序的入口，SUN公司java语言规定的）</span>    <span class="token comment" spellcheck="true">// 也就是说：JVM在执行程序的时候，会主动去找这样一个方法。没有这个规格的方法，程序是无法执行的。</span>    <span class="token comment" spellcheck="true">// main方法也可以叫做主方法。</span>    <span class="token comment" spellcheck="true">// 注意：方法必须放到“类体”中，不能放到“类体”外面。</span>    <span class="token comment" spellcheck="true">// 任何一个程序都要有一个入口，没有入口进不来，无法执行。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//这是一个入口方法。</span>        <span class="token comment" spellcheck="true">// 方法体</span>        <span class="token comment" spellcheck="true">// 注意：方法体由一行一行的“java语句”构成</span>        <span class="token comment" spellcheck="true">// 并且非常重要的是：任何一条java语句必须以“;”结尾，并且这个分号还得是英文的，不能用中文分号。</span>        <span class="token comment" spellcheck="true">// ";" 代表一条语句的结束。</span>        <span class="token comment" spellcheck="true">// 非常非常重要的是：方法体中的代码遵循自上而下的顺序依次逐行执行。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println();这行代码的作用是向控制台输出一句话。就是这个作用。</span>        <span class="token comment" spellcheck="true">// 注意：如果println后面小括号里的内容是一个“字符串”的话，必须使用英文双引号括起来。</span>        <span class="token comment" spellcheck="true">// 双引号也要成对儿写。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 能再来一个一模一样的入口吗？</span>    <span class="token comment" spellcheck="true">// 不行，有语法错误</span>    <span class="token comment" spellcheck="true">/*    public static void main(String[] args){    }    */</span>    <span class="token comment" spellcheck="true">// 方法2</span>    <span class="token comment" spellcheck="true">// 现在不执行不代表以后不执行，以后我们可以学习其它语法让他执行。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main2</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方法3</span>    <span class="token comment" spellcheck="true">// 方法4</span><span class="token punctuation">}</span></code></pre><h3 id="print-ln"><a href="#print-ln" class="headerlink" title="print(ln)"></a>print(ln)</h3><pre class=" language-java"><code class="language-java">　　　　　<span class="token comment" spellcheck="true">// 这个不加双引号行吗？</span>        <span class="token comment" spellcheck="true">// 可以，因为它是数字。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是数字，加双引号行吗？</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以上性质一样吗？</span>        <span class="token comment" spellcheck="true">// 不一样：一个是字符串，一个是数字。</span>        <span class="token comment" spellcheck="true">// 但最终输出到控制台上一个样子，没啥区别。</span>        <span class="token comment" spellcheck="true">// 这里扩展一下：对于数字来说能进行加减乘除吗？</span>        <span class="token comment" spellcheck="true">// + 能用吗？</span>        <span class="token comment" spellcheck="true">// - 能用吗？</span>        <span class="token comment" spellcheck="true">// / 能用吗？</span>        <span class="token comment" spellcheck="true">// * 能用吗？</span>        <span class="token comment" spellcheck="true">// 可以</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 300</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20000</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h3 id="重要结论"><a href="#重要结论" class="headerlink" title="重要结论"></a>重要结论</h3><p>第一个结论？</p><ol><li>一个java源文件中可以定义多个class。</li><li>public的类不是必须的。可以没有。</li><li>在源文件中只要有一个class的定义，那么必然会对应生成一个class文件。</li><li>public的类可以没有，但如果有的话，public修饰的类名必须和源文件名保持一致。</li><li>public的类有也只能有1个。</li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 单行注释</span><span class="token comment" spellcheck="true">/*    多行注释*/</span><span class="token comment" spellcheck="true">/*** javadoc注释：这里的注释信息可以自动被javadoc.exe命令解析提取并生成到帮助文档当中。*/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    1、什么是注释，有什么用？        注释是对java源代码的解释说明。        注释可以帮程序员更好的理解程序。    2、注释信息只保存在java源文件当中，java源文件编译生成的字节码class文件，    这个class文件中是没有这些注释信息的。    3、在实际的开发中，一般项目组都要求积极的编写注释。这也是一个java软件工程师    的基本素养。    4、注释不是写的越多越好，精简，主线清晰，每个注释都应该是点睛之笔。*/</span><span class="token comment" spellcheck="true">// 这种注释属于单行注释，只注释两个斜杠后面的</span><span class="token comment" spellcheck="true">/*** 类的注释信息* @version 1.0* @author bjpowernode-dujubin* ....*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这是一个类，类名叫做HelloWorld</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    在这里可以编写多行注释    这是一行注释    这是第二行注释    这是第三行注释*/</span></code></pre><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><h3 id="什么是标识符"><a href="#什么是标识符" class="headerlink" title="什么是标识符?"></a>什么是标识符?</h3><p>凡是程序员自己有权利命名的单词都是标识符。</p><h3 id="标识符可以标识什么？"><a href="#标识符可以标识什么？" class="headerlink" title="标识符可以标识什么？"></a>标识符可以标识什么？</h3><p>​            类名<br>​            方法名<br>​            变量名<br>​            接口名<br>​            常量名<br>​            ……</p><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ol><li><p>标识符只能由数字、字母（包括中文）、下划线_、美元符号$组成，不能含有其它符号。</p></li><li><p>标识符不能以数字开头</p></li><li><p>关键字不能做标识符。例如：public class static void 这些蓝色的字体<br>都是关键字，关键字是不能做标识符的。</p></li><li><p>标识符是严格区分大小写的。大写A和小写a不一样。</p></li><li><p>标识符理论上是没有长度限制的。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BiaoShiFuTest</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// main是一个方法的名称，属于标识符</span>    <span class="token comment" spellcheck="true">// 但是这个标识符不能修改，因为这个main是SUN固定死的。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//doSome是一个方法名，可以改成其他的名字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// k是一个变量名</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// nianLing 是一个变量名</span>        <span class="token keyword">int</span> nianLing <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    编译报错，错误信息是：        错误: 需要&lt;标识符>        错误原因：编译器检测到class这个单词，那么编译器会从class这个        单词后面找类名，而类名是标识符，编译器找了半天没有找到标识符，        因为123ABC不是标识符，所以编译器提示的错误信息是：需要&lt;标识符>        解决办法：            将123ABC修改为合法的标识符。*/</span><span class="token keyword">class</span> <span class="token class-name">Y123ABC</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 类名是标识符，标识符“中”不能有空格</span><span class="token comment" spellcheck="true">/*编译器错误信息是：    错误: 需要'{'    编译器检测到class，然后找class后面的标识符，编译器找到了一个合法的标识符    叫做“Hello”，然后编译器继续往后找“{”，结果没有找到“{”，所以报错了。    解决办法：        办法1：是把World删除        办法2：把空格删除*/</span><span class="token comment" spellcheck="true">/*class Hello World{}*/</span><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HelloWorld</span>                   <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_</span>$1Aa你<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 错误: 需要&lt;标识符></span><span class="token comment" spellcheck="true">// 关键字不能做标识符</span><span class="token comment" spellcheck="true">/*class public {}*/</span><span class="token comment" spellcheck="true">// 这个可以，因为 public1 不是关键字，可以用。</span><span class="token keyword">class</span> <span class="token class-name">public1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 虽然java中的标识符严格区分大小写</span><span class="token comment" spellcheck="true">// 但是对于类名来说，如果一个java源文件中同时出现了：A类和a类</span><span class="token comment" spellcheck="true">// 那么谁在前就生成谁。大家以后最好不要让类名“相同”。</span><span class="token comment" spellcheck="true">// 最好类名是不同的。</span><span class="token keyword">class</span> <span class="token class-name">HelloWorld2</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">helloWorld2</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h3><p>标识符除了命名规则之外，还有命名规范：</p><h4 id="命名规则和命名规范有什么区别？"><a href="#命名规则和命名规范有什么区别？" class="headerlink" title="命名规则和命名规范有什么区别？"></a>命名规则和命名规范有什么区别？</h4><p>​            命名规则是语法，不遵守就会编译报错。<br>​            命名规范只是说，大家尽量按照统一的规范来进行命名，不符合规范也行，<br>​            代码是可以编译通过的，但是你的代码风格和大家不一样，这个通常也是<br>​            不允许的。</p><p>​        规则类似于：现实世界中的法律。<br>​        规范类似于：现实世界中的道德。</p><p>​        统一按照规范进行的话，代码的可读性很好。<br>​        代码很容易让其它开发人员理解。</p><h4 id="具体的命名规范有哪些？"><a href="#具体的命名规范有哪些？" class="headerlink" title="具体的命名规范有哪些？"></a>具体的命名规范有哪些？</h4><ol><li><p>见名知意（这个标识符在起名的时候，最好一看这个单词就知道啥意思。）</p></li><li><p>遵循驼峰命名方式，什么是驼峰（一高一低，一高一低…）<br>​驼峰有利于单词与单词之间很好的进行分隔<br>​BiaoShiFuTest，这个很好，一眼就能看出来是4个单词。</p></li><li><p>类名、接口名有特殊要求<br>​类名和接口名首字母大写，后面每个单词首字母大写。<br>​StudentTest、UserTest ，这是类名、接口名。</p></li><li><p>变量名、方法名有特殊要求<br>​变量名和方法名首字母小写，后面每个单词首字母大写。<br>​nianLing（NianLing这样就不符合了。）<br>​mingZi（MingZi这样也不符合了。）</p></li><li><p>所有“常量”名：全部大写，并且单词和单词之间采用下划线衔接。<br>​USER_AGE ：用户年龄<br>​MATH_PI：固定不变的常量3.1415926…..</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdentifierTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> nianLing <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        String mingZi <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="程序当中的数据"><a href="#程序当中的数据" class="headerlink" title="程序当中的数据"></a>程序当中的数据</h3><p>​    开发软件是为了解决现实世界中的问题。<br>​    而现实世界当中，有很多问题都是使用数据进行描述的。<br>​    所以软件执行过程中最主要就是对数据的处理。</p><p>​    软件在处理数据之前需要能够表示数据，在java代码中<br>​    怎么去表示数据呢？在java中有这样的一个概念：字面量。</p><p>​    <strong>注意：</strong>在java语言中“数据”被称为“字面量”。<br>​    10<br>​    1.23<br>​    true<br>​    false<br>​    ‘a’<br>​    “abc”<br>​    以上这些都是数据，在程序中都被叫做“字面量”。</p><p>​    字面量可以分为很多种类：<br>​        整数型字面量：1 2 3 100 -100 -20 ….<br>​        浮点型字面量：1.3 1.2 3.14…..<br>​        布尔型字面量：true、false没有其它值了，表示真和假,true表示真，false表示假</p><p>​        字符型字面量：’a’、’b’、’中’<br>​        字符串型字面量：”abc”、”a”、”b”、”中国”</p><p>​        其中字符型和字符串型都是描述了现实世界中的文字：<br>​        <strong>注意：</strong><br>​                所有的字符型只能使用单引号括起来。<br>​                所有的字符串型只能使用双引号括起来。<br>​<br>​            字符型一定是单个字符才能成为“字符型”</p><p>​            在语法级别上怎么区分字符型和字符串型？<br>​                主要看是双引号还是单引号。<br>​                单引号的一定是字符型。<br>​                双引号的一定是字符串型。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarTest01</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这不属于字符型，因为使用双引号括起来了，所以它是字符串。</span>​    <span class="token comment" spellcheck="true">// 编译报错。ab是一个串，不是字符型，不能用单引号。</span>​    <span class="token comment" spellcheck="true">//System.out.println('ab');</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 属于字符型</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 属于字符串型</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//属于整数型吗？不是，是字符串。</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 属于布尔型吗？不是，是字符串。</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符串型</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 整数型</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 浮点型</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 布尔型</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 布尔型</span>​    <span class="token comment" spellcheck="true">//分析一下：如果只有字面量，没有变量机制的话，有什么问题？</span>​    <span class="token comment" spellcheck="true">// 10 是一个整数型数据，在内存中占有一定的空间（CPU 内存 硬盘）</span>​    <span class="token comment" spellcheck="true">// 10 + 20 = 30</span>​    <span class="token comment" spellcheck="true">// 在内存中找一块空间存储10，再找一块空间存储20，CPU负责“+”运算，算完</span>​    <span class="token comment" spellcheck="true">// 之后的结果是30，那么这个30也会在内存当中找一块临时的空间存储起来。</span>​    <span class="token comment" spellcheck="true">// 思考：以下的三个10在内存当中是一块空间，还是三块不同的空间呢？</span>​    <span class="token comment" spellcheck="true">// 以下虽然都是10，但是这3个10占用三块不同的内存空间。</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只有“字面量”机制的话，是远远不够的，因为只有字面量内存是无法重复利用的。</span>​    <span class="token comment" spellcheck="true">// 定义/声明一个变量，起名i</span>​    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>​    <span class="token comment" spellcheck="true">// 以下这5次访问都是访问的同一块内存空间。（这样使用变量之后，内存空间就得到了复用。）</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>​    <span class="token comment" spellcheck="true">// 以下程序表示访问的是字符i以及字符串i，以下的这两个i和以上的i变量没有任何关系。</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="什么是变量？"><a href="#什么是变量？" class="headerlink" title="什么是变量？"></a>什么是变量？</h3><p>变量其实就是内存当中存储数据的最基本的单元。<br>变量就是一个存储数据的盒子。</p><p>在java语言当中任何数据都是有数据类型的，其中整数型是：int</p><p>当然，在java中除了数据类型int之外，还有其它的类型，例如带小数的：double等。。。</p><blockquote><p> 数据类型有什么用呢？<br>    记住：不同的数据类型，在内存中分配的空间大小不同。<br>    也就是说，Java虚拟机到底给这个数据分配多大的空间，主要还是看这个变量的数据类型。<br>    根据不同的类型，分配不同大小的空间。</p><p>对于int这种整数类型，JVM会自动给int分配4个字节大小的空间。</p><p>1个字节=8个比特位<br>1个比特位就是一个1或0. 注意：比特位是二进制位。<br>int是占用多少个二进制位？1个int占有32个二进制位（bit位）</p><p>int i = 1; 实际上在内存中是这样表示的：<br>    00000000 00000000 00000000 00000001<br>int i = 2;<br>    00000000 00000000 00000000 00000010</p><p>二进制位就是：满2进1位（0 1 10 11 100 101….）<br>十进制位就是：满10进1位（1 2 3 4 5 6 7 8 9 10）</p></blockquote><h3 id="变量三要素"><a href="#变量三要素" class="headerlink" title="变量三要素"></a>变量三要素</h3><p><strong>对于一个变量来说，包括三要素</strong>：</p><ul><li>变量的数据类型</li><li>变量的名字</li><li>变量中保存的值</li></ul><p>​    类型+名字+值</p><p>​    类型决定空间的大小。<br>​    起个名字是为了以后方便访问。<br>​    值是变量保存的数据。</p><p><strong>变量分类</strong></p><p>　变量根据出现的位置进行划分：<br>    在方法体当中声明的变量：局部变量。<br>    在方法体之外，类体内声明的变量：成员变量。</p><p>​    重点依据是：声明的位置。</p><p><strong>注意：</strong>局部变量只在方法体当中有效，方法体执行结束该变量的内存就释放了。</p><p><strong>变量名命名规范</strong><br>        首字母小写，后面每个单词首字母大写，遵循驼峰命名方式，见名知意。</p><p><strong>变量怎么声明/定义的法格式：</strong><br>    数据类型 变量名;<br>    例如：<br>        int nianLing;</p><p>在java语言中有一个规定，变量必须先声明，再赋值才能访问。（没有值相当于这个空间没有开辟。）</p><p>在java语言中怎么给一个变量赋值呢，语法格式是什么？<br>    记住：使用一个运算符，叫做“=”，这个运算符被称为赋值运算符。<br>    赋值运算符“=”的运算特点是：等号右边先执行，执行完之后赋值给左边的变量。</p><p>变量可以声明的时候赋值吗？可以的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarTest02</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 这是一个程序的入口    * @param args是main方法的参数    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义一个int类型的变量，起名nianLing，该变量用来存储人的年龄。</span>        <span class="token keyword">int</span> nianLing<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量声明之后，没有手动赋值，可以直接访问吗？</span>        <span class="token comment" spellcheck="true">// 编译报错：错误: 可能尚未初始化变量nianLing</span>        <span class="token comment" spellcheck="true">//System.out.println(nianLing);</span>        <span class="token comment" spellcheck="true">// 给变量赋值</span>        nianLing <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nianLing<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是访问变量。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nianLing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是访问字符串。</span>        <span class="token comment" spellcheck="true">// 变量：可以变化的量。</span>        <span class="token comment" spellcheck="true">// 重新赋值</span>        nianLing <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nianLing<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再次重新赋值</span>        nianLing <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nianLing<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 体重80kg</span>        <span class="token keyword">int</span> tiZhong <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tiZhong<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>​    <strong>什么是作用域</strong><br>​            变量的有效范围。<br>​    <strong>关于变量的作用域，大家可以记住一句话：</strong><br>​            出了大括号就不认识了。<br>​    <strong>java中有一个很重要的原则：</strong><br>​            就近原则。<br>​            哪个离我近，就访问哪个。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarTest08</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成员变量</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 局部变量</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个i的有效范围是main方法。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个i是多少？</span>        <span class="token comment" spellcheck="true">// 同一个域当中，这是不允许的。</span>        <span class="token comment" spellcheck="true">//int i = 90;  </span>        <span class="token comment" spellcheck="true">// 考核一下：以下编写for循环你看不懂，没关系，后面会将。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这里声明的n变量只属于for域。for结束后n释放没了。</span>            <span class="token comment" spellcheck="true">// 这里没有编写代码。</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// for循环执行结束之后，在这里访问n变量可以吗？</span>        <span class="token comment" spellcheck="true">//System.out.println(n);  //错误: 找不到符号</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 属于main域。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 能否继续访问k呢？</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这个方法怎么定义先不用管，后面会学习。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在这个位置上能访问i吗？</span>        <span class="token comment" spellcheck="true">// 错误: 找不到符号</span>        <span class="token comment" spellcheck="true">// System.out.println(i); // i是无法访问的。</span>        <span class="token comment" spellcheck="true">// 可以定义一个变量起名i吗？</span>        <span class="token comment" spellcheck="true">// 这个i的有效范围是x方法。</span>        <span class="token comment" spellcheck="true">// 局部变量</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所以这个i和main方法中的i不在同一个域当中。不冲突。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="关于变量的一些结论："><a href="#关于变量的一些结论：" class="headerlink" title="关于变量的一些结论："></a>关于变量的一些结论：</h3><p>在同一个域当中，变量名不能重名，不能重复声明。<br>变量可以重新赋值，但在同一个域当中，不能重复声明。</p><p>可以一行声明多个变量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型作用"><a href="#数据类型作用" class="headerlink" title="数据类型作用"></a>数据类型作用</h3><p>数据类型用来声明变量，程序在运行过程中根据不同的数据类型分配不同大小的空间。<br>        int i = 10;<br>        double d = 1.23;<br>        i变量和d变量类型不同，空间大小不同。</p><h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><p>数据类型在java语言中包括两种：</p><ul><li><p>第一种：基本数据类型</p><p>基本数据类型又可以划分为4大类8小种：</p><pre><code>            第一类：整数型                `byte`,`short`,`int`,`long` （没有小数的）            第二类：浮点型                 `float`,`double` （带有小数的）            第三类：布尔型                `boolean`：只有两个值`true`和`false`，`true`表示真，`false`表示假            第四类：字符型                `char`：`java`中规定字符型字面量必须使用单引号括起来。属于文字。</code></pre><p>​        　　8小种：<br>​            　　<code>byte</code>,<code>short</code>,<code>int</code>,<code>long</code><br>​        　　    <code>float</code>,<code>double</code><br>​            　　<code>boolean</code><br>​            　　<code>char</code></p></li><li><p>第二种：引用数据类型</p><p>字符串型String属于引用数据类型。<br>String字符串不属于基本数据类型范畴。<br>java中除了基本数据类型之外，剩下的都是引用数据类型。<br>引用数据类型面向对象时才会接触。</p></li></ul><h3 id="8种基本数据类型区别"><a href="#8种基本数据类型区别" class="headerlink" title="8种基本数据类型区别"></a>8种基本数据类型区别</h3><p>　　整数型：byte short int long有什么区别？<br>        浮点型：float和double有什么区别？<br>        区别：占用的空间大小不同。</p><table><thead><tr><th align="center">类型</th><th align="center">占用字节数量</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1</td><td align="center">[-128 ~ 127]</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">[-32768 ~ 32767]</td></tr><tr><td align="center">int</td><td align="center">4</td><td align="center">[-2147483648 ~ 2147483647]</td></tr><tr><td align="center">long</td><td align="center">8</td><td align="center">[-9223372036854774808~9223372036854774807]</td></tr><tr><td align="center">float</td><td align="center">4</td><td align="center">[3.402823e+38 ~ 1.401298e-45]</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">[1.797693e+308~ 4.9000000e-324]</td></tr><tr><td align="center">boolean</td><td align="center">1</td><td align="center">[\u0000~\uFFFF]</td></tr><tr><td align="center">char</td><td align="center">2</td><td align="center">[0~65535]</td></tr></tbody></table><h3 id="数据类型详解"><a href="#数据类型详解" class="headerlink" title="数据类型详解"></a>数据类型详解</h3><p>​    字符型：char</p><p>​    整数型：byte，short， int， long</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以直接赋值</span>        <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">32767</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以直接赋值</span></code></pre><p>浮点型：float double<br>布尔型：boolean</p><h4 id="Int"><a href="#Int" class="headerlink" title="Int"></a>Int</h4><p>整数型在java语言中共4种类型：<br>        byte    1个字节  最大值127<br>        short    2个字节  最大值32767<br>        int    4个字节  2147483647是int最大值，超了这个范围可以使用long类型。<br>        long    8个字节</p><p>​    1个字节 = 8个二进制位<br>​    1byte = 8bit</p><p>​    对于以上的四个类型来说，最常用的是int。<br>​    开发的时候不用斤斤计较，直接选择使用int就行了。</p><p>在java语言中整数型字面量有4种表示形式：<br>    十进制：最常用的。<br>    二进制<br>    八进制<br>    十六进制</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntTest01</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 十进制</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>        <span class="token comment" spellcheck="true">// 八进制</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8</span>        <span class="token comment" spellcheck="true">// 十六进制</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 16</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//十进制方式</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 二进制（JDK8的新特性，低版本不支持。）</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0b10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在java中有一条非常重要的结论，必须记住：<br>        在任何情况下，整数型的“字面量/数据”默认被当做int类型处理。<br>        如果希望该“整数型字面量”被当做long类型来处理，需要在“字面量”后面添加L/l<br>        建议使用大写L，因为小写l和1傻傻分不清。</p><h3 id="类型转换时需要遵循的规则"><a href="#类型转换时需要遵循的规则" class="headerlink" title="类型转换时需要遵循的规则"></a>类型转换时需要遵循的规则</h3><ol><li><p>八种基本数据类型中，除 boolean 类型不能转换，剩下七种类型之间都可以<br>进行转换；</p></li><li><p>如果整数型字面量没有超出 byte,short,char 的取值范围，可以直接将其赋<br>值给byte,short,char 类型的变量；</p></li><li><p>小容量向大容量转换称为自动类型转换，容量从小到大的排序为：<br>byte &lt; short(char) &lt; int &lt; long &lt; float &lt; double，其中 short和 char<br>都占用两个字节，但是char 可以表示更大的正整数；</p></li><li><p>大容量转换成小容量，称为强制类型转换，编写时必须添加“强制类型转换符”，<br>但运行时可能出现精度损失，谨慎使用；</p></li><li><p>byte,short,char 类型混合运算时，先各自转换成 int 类型再做运算；</p></li><li><p>多种数据类型混合运算，各自先转换成容量最大的那一种再做运算；</p></li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>+  -  * / % ++ –</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>&gt;  &gt;=   &lt;  &lt;=  ==  != </p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>​    &amp;  |  !   &amp;&amp;  ||</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>​    =  +=  -=  *=  /=  %=</p><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p>​    布尔表达式 ? 表达式1 : 表达式2</p><h3 id="字符串连接运算符："><a href="#字符串连接运算符：" class="headerlink" title="字符串连接运算符："></a>字符串连接运算符：</h3><p>​    +</p><p>持续更新……</p><hr><p><strong>如果自己不想积极认真地生活，不管得到什么样的回答都没用。——东野圭吾 《解忧杂货店》</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不蒜子和live2d看板娘冲突问题</title>
      <link href="/2020/05/19/bu-suan-zi-he-live2d-kan-ban-niang-chong-tu-wen-ti/"/>
      <url>/2020/05/19/bu-suan-zi-he-live2d-kan-ban-niang-chong-tu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在搭建完博客之后发现不蒜子计数失效，网站底部的访问人数和数量以及文章中的阅读人数均不显示，反复刷新后会短暂显示。</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>百度之后原因是不蒜子官网域名更改的问题，可是我翻了源码之后发现域名是最新的，因此排除此错误。</p><p>后来仔细阅读了源码，发现不蒜子的启动方式是一个判断语句:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>totalTraffic<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>并且当主题配置文件中的enable更改为false时反而能显示出来文字，仔细回忆失效时间似乎是搭建过程中才失效的，应该是和某些插件冲突。于是我查找了资料发现有不蒜子和</p><p>live2d冲突的帖子。终于找到了原因所在。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先是将不蒜子的js插件保存到本地，基本上都是<code>busuanzi.pure.mini.js</code>这个文件。如果使用的是来自外网的js文件，也请下载到本地。</p><p>将文件更改如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bszCaller<span class="token punctuation">,</span>bszTag<span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ready<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">||</span><span class="token string">"interactive"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">||</span><span class="token string">"complete"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">?</span>c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">:</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>c<span class="token operator">></span>a<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>removeEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>addEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token regex">/loaded|complete/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span>a<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">doScroll</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszCaller<span class="token operator">=</span><span class="token punctuation">{</span>fetch<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token string">"BusuanziCallback_"</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1099511627776</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalCall</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"SCRIPT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>defer<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>src<span class="token operator">=</span>a<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>evalCall<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>bszCaller<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>bszTag<span class="token punctuation">.</span><span class="token function">texts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token punctuation">.</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token operator">=</span><span class="token punctuation">{</span>bszs<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"site_pv"</span><span class="token punctuation">,</span><span class="token string">"page_pv"</span><span class="token punctuation">,</span><span class="token string">"site_uv"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>texts<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_value_"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hides<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>shows<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"inline"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>操作其实就是把其中的<code>b.style.display="none"</code>中<code>none</code>去掉。然后在clean一下，再部署发布即可。</p><hr><p><strong>不赶什么浪潮，也不搭什么船，我自己有海。—— 陈粒</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 - 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲聊</title>
      <link href="/2020/05/18/xian-liao/"/>
      <url>/2020/05/18/xian-liao/</url>
      
        <content type="html"><![CDATA[<p>为了记录平时遇到的问题和学习笔记，今年我开始尝试着用博客作学习记录。当然，作为一个技术萌（cai）新（ji）。刚开始我选择了第三方博客网站，也是我的技术启蒙网站（此处自动忽略P站）——CSDN，无奈第三方网站因为某些众所周知的原因,限制比较多，影响拓（liao）展(sao)。</p><p><img src="/themes/matery/source/medias/loading.gif" data-original="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1589798128936&amp;di=4c7e6edf09c4a9a8fa8b699bd6e09107&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.962.net%2Fup%2F2018-5%2F2018525143726653750.png" alt=""></p><p>于是，在一个昏暗的午后。我匆匆忙忙地回到家，一头扎进卧室，锁好门，关上窗，小心翼翼的拉上窗帘。确定家里没有人了之后，我深深地长舒了一口气，做了一个深呼吸，慢慢打开电脑，点开了那个网站——没错！就是它！Hexo官方网站！</p><p><img src="/themes/matery/source/medias/loading.gif" data-original="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1589798608403&amp;di=d23516d7e8d9312bcb68da6ecbf0255e&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.bqatj.com%2Fimg%2F819788a3293f160d.jpg" alt=""></p><p>我要迈出我人生除了纸尿裤的另外重要的一步——搭建属于自己的个人博客！经过网上搜集资料和学长的帮助通过近一周的辛（dong）苦(pin)搭(xi)建(cou)，从本地环境搭建到成型再到优化最终部署，好歹做到了基本的满意。当然了还有很大的进步空间，希望各位大佬能批评指正，感激不尽！</p><p><img src="/themes/matery/source/medias/loading.gif" data-original="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1589799222792&amp;di=030649b02dbbbb69a260a0f3c5b248fa&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.people.com.cn%2Fmediafile%2Fpic%2F20150918%2F15%2F3483327091848624563.jpg" alt=""></p><p>从今天开始，我正式把技术笔记和问题的记录转移到个人博客上来。当然，除此之外我还会记录一些生活上日常，当做一个QQ空间用吧。不推广，没什么亮点，估计博客的访问量也不回太高——只能通过后台改访客人数来充数<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8">😁</span></p><p>好了，天儿不早了，也该继续上网课了<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span>。如果您能读到这篇文章，就已经是对我最大的鼓励！​祝您前程似锦，幸福安康！</p><hr><p><strong>这个世界没有什么好畏惧的，反正我们只来一次。——朱德庸</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全部测试 代码+文字</title>
      <link href="/2020/05/08/wen-zi-dai-ma-ce-shi/"/>
      <url>/2020/05/08/wen-zi-dai-ma-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><ul><li>列表一</li><li>列表二<br>  a 子列表1<br>  b 子列表2</li><li>列表三<br><a href="https://www.baidu.com/index.php?tn=monline_3_dg" target="_blank" rel="noopener">我的链接</a><br><img src="/themes/matery/source/medias/loading.gif" data-original="http://pic1.win4000.com/wallpaper/5/58b4d526e95c2.jpg" alt="我的图片"></li></ul><p><em>字体是斜线</em><br><strong>字体是加粗的</strong></p><p><code>&lt;html&gt;//单行代码块&lt;/html&gt;</code></p><pre><code>&lt;html&gt;    &lt;head&gt;        &lt;title&gt;我是标题&lt;/title&gt;    &lt;/head&gt;&lt;/html&gt;</code></pre><p><code>&lt;java&gt;asdasdas&lt;/java&gt;</code></p><hr><p>你好！这是我的第一篇文章哦！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
