<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++基础</title>
      <link href="/2020/05/20/c-ji-chu/"/>
      <url>/2020/05/20/c-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础"><a href="#C-基础" class="headerlink" title="C++基础"></a>C++基础</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><pre><code>Visual Studio：创建新项目——VisualC++——空项目——填写项目名——填写项目路径——确定</code></pre><h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><p>给C++文件起个名称，然后点击添加即可。</p><h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int main() {    cout << "Hello world" << endl;    system("pause");    return 0;}</code></pre><p> 运行程序输出结果</p><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，==对该段代码做整体说明==</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><p><strong>示例：</strong> </p><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;//这是单行注释  嘿嘿int main() {    system("pause");/*你看！我就是多行注释！不错吧！比你厉害！！！*/    return 0;}</code></pre><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><pre class=" language-C++"><code class="language-C++">#include<iostream>using namespace std;int main() {    //变量的定义    //语法：数据类型  变量名 = 初始值    int a = 10;    cout << "a = " << a << endl;    system("pause");    return 0;}</code></pre><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul><li>==通常在文件上方定义==，表示一个常量</li></ul></li></ol><ol start="2"><li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><pre class=" language-C++"><code class="language-C++">#include<stream>using namespace std;//1、宏常量#define day 7int main() {    cout << "一周里总共有 " << day << " 天" << endl;    //day = 8;  //报错，宏常量不可以修改    //2、const修饰变量    const int month = 12;    cout << "一年里总共有 " << month << " 个月份" << endl;    //month = 24; //报错，常量是不可以修改的    system("pause");    return 0;}</code></pre><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;int main() {    //int int = 10; 1.标识符不可以是关键字    int abc = 11;    //int 8asc = 22;     //3.标识符第一个字符只能是字母或下划线    int _asd = 33;    //2.标识符是由字母，数字，下划线构成    //标识符是区分大小写的    int aaa = 88;    //int AAA = 100;错误 标识符是区分大小写的    cout << "变量值是：" << aaa << endl;    system("pause");    return 0;}</code></pre><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;int main() {    short num1 = 10;    int num2 = 10;    long num3 = 10;    long long num4 = 10;    system("pause");    return 0;}</code></pre><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><pre class=" language-C++"><code class="language-C++">#include <iostream>using namespace std;int main() {    cout << "short 类型所占内存空间为： " << sizeof(short) << endl;    cout << "int 类型所占内存空间为： " << sizeof(int) << endl;    cout << "long 类型所占内存空间为： " << sizeof(long) << endl;    cout << "long long 类型所占内存空间为： " << sizeof(long long) << endl;    system("pause");    return 0;}</code></pre><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><pre class=" language-C++"><code class="language-C++">#include <iostream>using namespace std;int main() {    float f1 = 3.14f;//通常在float类型的后面会加上f，否则系统会默认当成double类型，再转化赋值。    cout << f1 << endl;    double d1 = 3.14;    cout << d1<< endl;    cout << "float  sizeof = " << sizeof(f1) << endl;    cout << "double sizeof = " << sizeof(d1) << endl;    //科学计数法    float f2 = 3e2; // 3 * 10 ^ 2     cout << "f2 = " << f2 << endl;    float f3 = 3e-2;  // 3 * 0.1 ^ 2    cout << "f3 = " << f3 << endl;    system("pause");    return 0;}</code></pre><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = 'a';</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><pre class=" language-C++"><code class="language-C++">#include<iostream>using namespace std;int main() {    //1.字符型变量创建方式    char ch = 'a';    cout << ch << endl;    //2.字符型变量所占内存大小    cout << sizeof(char) << endl;    //3.字符型类型常见的错误    //ch = "b"; //错误，不可以用双引号    //ch = 'abcde'; //错误，单引号内只能引用一个字符    cout << (int)ch << endl;  //查看字符a对应的ASCII码    ch = 97; //可以直接用ASCII给字符型变量赋值    cout << ch << endl;    //a-97   A-65    system("pause");    return 0;}</code></pre><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><p>持续更新……</p><hr><p><strong>我还有改变的可能性。一想起这一点，我就心潮澎湃。——北野武</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的快捷键</title>
      <link href="/2020/05/20/chang-yong-de-kuai-jie-jian/"/>
      <url>/2020/05/20/chang-yong-de-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h3 id="常用的组合键"><a href="#常用的组合键" class="headerlink" title="常用的组合键"></a>常用的组合键</h3><p>​        复制    <code>ctrl + c</code><br>​        粘贴    <code>ctrl + v</code><br>​        剪切    <code>ctrl + x</code><br>​        保存    <code>ctrl + s</code><br>​        撤销    <code>ctrl + z</code><br>​        重做    <code>ctrl + y</code><br>​        全选：<code>ctrl + a</code><br>​        查找：<code>ctrl + f</code></p><p>​        回到行首：<code>home</code>键<br>​        回到行尾：<code>end</code>键</p><p>​        当光标在行尾，选中一行<br>​        <code>shift + home</code>键</p><p>​        当光标在行首，选中一行<br>​        <code>shift + end</code>键</p><p>​        回到文件头：<code>ctrl + home</code><br>​        回到文件尾：<code>ctrl + end</code></p><p>​        选中一个单词：鼠标双击<br>​        选中一行：鼠标连续击3次</p><p>​        不用鼠标选中一个单词：<code>ctrl + shift</code> + 右箭头/左箭头</p><hr><p><strong>有些笑容背后是紧咬牙关的灵魂。 ——柴静</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> 开发基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用DOS命令</title>
      <link href="/2020/05/19/chang-yong-dos-ming-ling/"/>
      <url>/2020/05/19/chang-yong-dos-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的DOS命令"><a href="#常用的DOS命令" class="headerlink" title="常用的DOS命令"></a>常用的<code>DOS</code>命令</h2><h3 id="什么是DOS命令？"><a href="#什么是DOS命令？" class="headerlink" title="什么是DOS命令？"></a>什么是<code>DOS</code>命令？</h3><p>​        在<code>DOS</code>命令窗口中才可以输入并执行<code>DOS</code>命令。<br>​        在最初的<code>windows</code>计算机中没有图形界面的，只有<code>DOS</code>命令窗口。<br>​        也就是说通过执行<code>DOS</code>命令窗口可以完全完成文件的新建、编辑、保存、删除<br>​        等一系列操作。</p><h3 id="打开DOS命令窗口的方法"><a href="#打开DOS命令窗口的方法" class="headerlink" title="打开DOS命令窗口的方法"></a>打开<code>DOS</code>命令窗口的方法</h3><p>​        1.<code>win</code>键 + <code>r</code> （组合键）：可以打开“运行”窗口<br>​            在运行窗口文本框中输入: <code>cmd</code><br>​            然后回车</p><p>​        2.也可以直接在制定文件夹的地址栏中输入<code>cmd</code>，回车打开</p><h3 id="DOS命令默认打开位置"><a href="#DOS命令默认打开位置" class="headerlink" title="DOS命令默认打开位置"></a><code>DOS</code>命令默认打开位置</h3><p>​        <code>C:\Users\Administrator</code>这是默认的当前路径</p><h3 id="在DOS命令窗口中如何复制内容"><a href="#在DOS命令窗口中如何复制内容" class="headerlink" title="在DOS命令窗口中如何复制内容"></a>在<code>DOS</code>命令窗口中如何复制内容</h3><p>​        <code>win7</code>:任意位置点击右键–&gt;标记–&gt;选中要复制的内容–&gt;点击右键–&gt;此时就到剪贴板里面了<br>​        <code>win10</code>：左键直接选中，然后右键单击一下就到剪贴板里面了。</p><h3 id="新建目录mkdir"><a href="#新建目录mkdir" class="headerlink" title="新建目录mkdir"></a>新建目录<code>mkdir</code></h3><p>​        <code>mkdir abc  (make directory)</code><br>​        创建一个目录，起名<code>abc</code></p><h3 id="切换盘符"><a href="#切换盘符" class="headerlink" title="切换盘符"></a>切换盘符</h3><p>​        直接输入盘符：<br>​                <code>c</code>: 回车<br>​                <code>d</code>: 回车<br>​                <code>e</code>: 回车<br>​                <code>f</code>: 回车<br>​        当切换到D盘根下了，那么当前路径就是：D:&gt;<br>​        当前路径是当前所在的位置。</p><h3 id="切换目录cd"><a href="#切换目录cd" class="headerlink" title="切换目录cd"></a>切换目录<code>cd</code></h3><p>​        <code>cd：change directory</code>(改变目录)</p><h4 id="cd命令用法"><a href="#cd命令用法" class="headerlink" title="cd命令用法"></a>cd命令用法</h4><p>​        <code>cd</code> 路径      路径在<code>windows</code>系统上包括：相对路径和绝对路径。</p><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>​        一定要注意，从路径形式上来看，相对路径是一定不会以盘符开始的。<br>​        相对路径：相对路径一定是相对于当前所在“位置”而言的。<br>​        相对路径是相对于当前而言，从当前所在的位置作为起点。</p><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>​        在windows操作系统中凡是路径起点是盘符的都是绝对路径，例如：</p><pre><code>C:\UsersC:\Users\Public\gakatakaC:\Windows\System32D:\BaiduNetdiskDownloadD:\course\OneNote </code></pre><p>​        注意：<br>​        <code>cd ..</code>回到上级路径。<br>​        <code>cd \</code>直接回到根路径。<br>​        <code>.</code>一个点，代表当前路径。</p><h3 id="清屏-cls"><a href="#清屏-cls" class="headerlink" title="清屏 cls"></a>清屏 <code>cls</code></h3><h3 id="查看当前目录下有啥东西-dir"><a href="#查看当前目录下有啥东西-dir" class="headerlink" title="查看当前目录下有啥东西 dir"></a>查看当前目录下有啥东西 <code>dir</code></h3><h3 id="退出DOS命令窗口exit"><a href="#退出DOS命令窗口exit" class="headerlink" title="退出DOS命令窗口exit"></a>退出DOS命令窗口<code>exit</code></h3><h3 id="删除命令-del"><a href="#删除命令-del" class="headerlink" title="删除命令 del"></a>删除命令 <code>del</code></h3><p>​        <code>del</code>命令，删除一个或者多个文件<br>​        删除<code>T1.class</code>文件:<br>​        <code>C:\Users\Administrator&gt;del T1.class</code><br>​        删除所有<code>.class</code>结尾的文件，支持模糊匹配:<br>​        <code>C:\Users\Administrator&gt;del *.class</code></p><p>​        <code>T1.class</code><br>​        <code>T1.glass</code><br>​        <code>del *ass</code> 这个命令就会将<code>T1.class</code>和<code>T1.glass</code>都删除。<br>​        删除的一定是能匹配上的。<br>​        <code>del *.class</code>这个命令中的那个<code>.</code>不要特殊化，这个<code>.</code>其实就是一个普通的字母</p><h3 id="查看本机的IP地址"><a href="#查看本机的IP地址" class="headerlink" title="查看本机的IP地址"></a>查看本机的<code>IP</code>地址</h3><h4 id="什么是IP地址？有什么用呢？"><a href="#什么是IP地址？有什么用呢？" class="headerlink" title="什么是IP地址？有什么用呢？"></a>什么是<code>IP</code>地址？有什么用呢？</h4><p>​        <code>A</code>计算机在网络当中要想定位到（连接到）<code>B</code>计算机，那么必须要先<br>​        知道B计算机的<code>IP</code>地址，<code>IP</code>地址也可以看做计算机在同一个网络当中的<br>​        身份证号（唯一标识）。<br>​        <code>IP</code>地址就相当于电话号码是一个意思。<br>​        <code>ipconfig</code>（<code>ip</code>地址的配置信息。）</p><p>​        <code>ipconfig /all</code>该命令后面添加一个<code>/all</code>参数可以查看更详细的网络信息。<br>​        这个详细信息中包括网卡 的物理地址，例如：<code>70-8B-CD-A7-BA-25</code><br>​        这个物理地址具有全球唯一性。物理地址通常叫做<code>MAC</code>地址。</p><h3 id="如何查看两台计算机是否可以正常通信"><a href="#如何查看两台计算机是否可以正常通信" class="headerlink" title="如何查看两台计算机是否可以正常通信"></a>如何查看两台计算机是否可以正常通信</h3><p>​        <code>ping</code>命令<br>​        语法格式：<br>​                <code>ping IP</code>地址<br>​                <code>ping</code>域名<br>​        </p><pre><code>    ping www.baidu.com    ping 61.135.169.121  （61.135.169.121是百度的IP地址）    ping 61.135.169.121 -t （-t参数表示一直ping）    一直ping的目的可以查看网络是否稳定。</code></pre><p>​        在一个<code>DOS</code>命令窗口中如果有一个命令一直在执行，想强行终止怎么办？<br>​        <code>ctrl + c</code>组合键<br>​<br>​        <code>http://www.baidu.com</code>可以打开百度（这种方式比较方便，域名更容易记忆。）<br>​        <code>http://61.135.169.121</code>也可以打开百度</p><p>​        域名底层最终还是会被解析成<code>IP</code>地址的形式。</p><hr><p><strong>由于我的无知，我对生存方式只有一个非常普通的信条：不许后悔。——坂口安吾</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发基础 </tag>
            
            <tag> DOS命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记</title>
      <link href="/2020/05/19/java-xue-xi-bi-ji/"/>
      <url>/2020/05/19/java-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><p>持续更新……</p><hr><p><strong>如果自己不想积极认真地生活，不管得到什么样的回答都没用。——东野圭吾 《解忧杂货店》</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不蒜子和live2d看板娘冲突问题</title>
      <link href="/2020/05/19/bu-suan-zi-he-live2d-kan-ban-niang-chong-tu-wen-ti/"/>
      <url>/2020/05/19/bu-suan-zi-he-live2d-kan-ban-niang-chong-tu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在搭建完博客之后发现不蒜子计数失效，网站底部的访问人数和数量以及文章中的阅读人数均不显示，反复刷新后会短暂显示。</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>百度之后原因是不蒜子官网域名更改的问题，可是我翻了源码之后发现域名是最新的，因此排除此错误。</p><p>后来仔细阅读了源码，发现不蒜子的启动方式是一个判断语句:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>busuanziStatistics <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>busuanziStatistics<span class="token punctuation">.</span>totalTraffic<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>并且当主题配置文件中的enable更改为false时反而能显示出来文字，仔细回忆失效时间似乎是搭建过程中才失效的，应该是和某些插件冲突。于是我查找了资料发现有不蒜子和</p><p>live2d冲突的帖子。终于找到了原因所在。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先是将不蒜子的js插件保存到本地，基本上都是<code>busuanzi.pure.mini.js</code>这个文件。如果使用的是来自外网的js文件，也请下载到本地。</p><p>将文件更改如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bszCaller<span class="token punctuation">,</span>bszTag<span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ready<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">||</span><span class="token string">"interactive"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">||</span><span class="token string">"complete"</span><span class="token operator">===</span>document<span class="token punctuation">.</span>readyState<span class="token operator">?</span>c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">:</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>c<span class="token operator">></span>a<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>removeEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>addEventListener<span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>document<span class="token punctuation">.</span>attachEvent<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onreadystatechange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token regex">/loaded|complete/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>window<span class="token operator">==</span>window<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span>a<span class="token operator">||</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">doScroll</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszCaller<span class="token operator">=</span><span class="token punctuation">{</span>fetch<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token string">"BusuanziCallback_"</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1099511627776</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evalCall</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"SCRIPT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>defer<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>src<span class="token operator">=</span>a<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>evalCall<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token function">a</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>scriptTag<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>bszTag<span class="token punctuation">.</span><span class="token function">hides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>bszCaller<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>bszTag<span class="token punctuation">.</span><span class="token function">texts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token punctuation">.</span><span class="token function">shows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bszTag<span class="token operator">=</span><span class="token punctuation">{</span>bszs<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"site_pv"</span><span class="token punctuation">,</span><span class="token string">"page_pv"</span><span class="token punctuation">,</span><span class="token string">"site_uv"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>texts<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> c<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_value_"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hides<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>shows<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>bszs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> b<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">"inline"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>操作其实就是把其中的<code>b.style.display="none"</code>中<code>none</code>去掉。然后在clean一下，再部署发布即可。</p><hr><p><strong>不赶什么浪潮，也不搭什么船，我自己有海。—— 陈粒</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 - 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲聊</title>
      <link href="/2020/05/18/xian-liao/"/>
      <url>/2020/05/18/xian-liao/</url>
      
        <content type="html"><![CDATA[<p>为了记录平时遇到的问题和学习笔记，今年我开始尝试着用博客作学习记录。当然，作为一个技术萌（cai）新（ji）。刚开始我选择了第三方博客网站，也是我的技术启蒙网站（此处自动忽略P站）——CSDN，无奈第三方网站因为某些众所周知的原因,限制比较多，影响拓（liao）展(sao)。</p><p><img src="/themes/matery/source/medias/loading.gif" data-original="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1589798128936&amp;di=4c7e6edf09c4a9a8fa8b699bd6e09107&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.962.net%2Fup%2F2018-5%2F2018525143726653750.png" alt=""></p><p>于是，在一个昏暗的午后。我匆匆忙忙地回到家，一头扎进卧室，锁好门，关上窗，小心翼翼的拉上窗帘。确定家里没有人了之后，我深深地长舒了一口气，做了一个深呼吸，慢慢打开电脑，点开了那个网站——没错！就是它！Hexo官方网站！</p><p><img src="/themes/matery/source/medias/loading.gif" data-original="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1589798608403&amp;di=d23516d7e8d9312bcb68da6ecbf0255e&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.bqatj.com%2Fimg%2F819788a3293f160d.jpg" alt=""></p><p>我要迈出我人生除了纸尿裤的另外重要的一步——搭建属于自己的个人博客！经过网上搜集资料和学长的帮助通过近一周的辛（dong）苦(pin)搭(xi)建(cou)，从本地环境搭建到成型再到优化最终部署，好歹做到了基本的满意。当然了还有很大的进步空间，希望各位大佬能批评指正，感激不尽！</p><p><img src="/themes/matery/source/medias/loading.gif" data-original="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1589799222792&amp;di=030649b02dbbbb69a260a0f3c5b248fa&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.people.com.cn%2Fmediafile%2Fpic%2F20150918%2F15%2F3483327091848624563.jpg" alt=""></p><p>从今天开始，我正式把技术笔记和问题的记录转移到个人博客上来。当然，除此之外我还会记录一些生活上日常，当做一个QQ空间用吧。不推广，没什么亮点，估计博客的访问量也不回太高——只能通过后台改访客人数来充数<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8">😁</span></p><p>好了，天儿不早了，也该继续上网课了<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span>。如果您能读到这篇文章，就已经是对我最大的鼓励！​祝您前程似锦，幸福安康！</p><hr><p><strong>这个世界没有什么好畏惧的，反正我们只来一次。——朱德庸</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全部测试 代码+文字</title>
      <link href="/2020/05/08/wen-zi-dai-ma-ce-shi/"/>
      <url>/2020/05/08/wen-zi-dai-ma-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><ul><li>列表一</li><li>列表二<br>  a 子列表1<br>  b 子列表2</li><li>列表三<br><a href="https://www.baidu.com/index.php?tn=monline_3_dg" target="_blank" rel="noopener">我的链接</a><br><img src="/themes/matery/source/medias/loading.gif" data-original="http://pic1.win4000.com/wallpaper/5/58b4d526e95c2.jpg" alt="我的图片"></li></ul><p><em>字体是斜线</em><br><strong>字体是加粗的</strong></p><p><code>&lt;html&gt;//单行代码块&lt;/html&gt;</code></p><pre><code>&lt;html&gt;    &lt;head&gt;        &lt;title&gt;我是标题&lt;/title&gt;    &lt;/head&gt;&lt;/html&gt;</code></pre><p><code>&lt;java&gt;asdasdas&lt;/java&gt;</code></p><hr><p>你好！这是我的第一篇文章哦！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
